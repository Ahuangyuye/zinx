// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.26.0
// 	protoc        (unknown)
// source: preson.proto

package pb

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

//游戏逻辑消息定义
//游戏逻辑主消息ID
type LOGIC_MAIN_MSG int32

const (
	LOGIC_MAIN_MSG_MSG_GAMELOGIC_MAIN_ID LOGIC_MAIN_MSG = 0
)

// Enum value maps for LOGIC_MAIN_MSG.
var (
	LOGIC_MAIN_MSG_name = map[int32]string{
		0: "MSG_GAMELOGIC_MAIN_ID",
	}
	LOGIC_MAIN_MSG_value = map[string]int32{
		"MSG_GAMELOGIC_MAIN_ID": 0,
	}
)

func (x LOGIC_MAIN_MSG) Enum() *LOGIC_MAIN_MSG {
	p := new(LOGIC_MAIN_MSG)
	*p = x
	return p
}

func (x LOGIC_MAIN_MSG) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (LOGIC_MAIN_MSG) Descriptor() protoreflect.EnumDescriptor {
	return file_preson_proto_enumTypes[0].Descriptor()
}

func (LOGIC_MAIN_MSG) Type() protoreflect.EnumType {
	return &file_preson_proto_enumTypes[0]
}

func (x LOGIC_MAIN_MSG) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *LOGIC_MAIN_MSG) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = LOGIC_MAIN_MSG(num)
	return nil
}

// Deprecated: Use LOGIC_MAIN_MSG.Descriptor instead.
func (LOGIC_MAIN_MSG) EnumDescriptor() ([]byte, []int) {
	return file_preson_proto_rawDescGZIP(), []int{0}
}

//游戏逻辑子消息ID定义
//服务器发送客户端
type MESSAGE_SC_BURRACO_SUB_ID int32

const (
	MESSAGE_SC_BURRACO_SUB_ID_MSGID_SC_BURRACO_GAME_START_DATA       MESSAGE_SC_BURRACO_SUB_ID = 1000 //游戏开始数据          [MSG_SC_BURRACO_GameStartData]
	MESSAGE_SC_BURRACO_SUB_ID_MSGID_SC_BURRACO_SEND_HAND_CARD        MESSAGE_SC_BURRACO_SUB_ID = 1001 //发送手牌             [MSG_SC_BURRACO_SendHandCard]
	MESSAGE_SC_BURRACO_SUB_ID_MSGID_SC_BURRACO_INFORM_USEROP         MESSAGE_SC_BURRACO_SUB_ID = 1003 //通知玩家操作消息       [MSG_SC_BURRACO_InformUserOP]
	MESSAGE_SC_BURRACO_SUB_ID_MSGID_SC_BURRACO_GAME_RESULT           MESSAGE_SC_BURRACO_SUB_ID = 1005 //游戏结算              [MSG_SC_BURRACO_GameResult]
	MESSAGE_SC_BURRACO_SUB_ID_MSGID_SC_BURRACO_GAMESCENCE_PLAY       MESSAGE_SC_BURRACO_SUB_ID = 1006 //游戏场景(断线重连)      [MSG_SC_BURRACO_GamePlay]
	MESSAGE_SC_BURRACO_SUB_ID_MSGID_SC_BURRACO_GAMESCENCE_FREE       MESSAGE_SC_BURRACO_SUB_ID = 1007 //空闲场景
	MESSAGE_SC_BURRACO_SUB_ID_MSGID_SC_BURRACO_ROBOT_GAME_RESULT     MESSAGE_SC_BURRACO_SUB_ID = 1008 //机器人退出 主动结算     [MSG_SC_BURRACO_RobotGameResult]
	MESSAGE_SC_BURRACO_SUB_ID_MSGID_SC_BURRACO_USER_GET_CARD_RESULT  MESSAGE_SC_BURRACO_SUB_ID = 1011 //玩家拿牌结果          [MSG_SC_BURRACO_UserGetCardResult]
	MESSAGE_SC_BURRACO_SUB_ID_MSGID_SC_BURRACO_USER_SOLITAIRE_RESULT MESSAGE_SC_BURRACO_SUB_ID = 1012 //玩家组牌接龙solitaire结果[MSG_SC_BURRACO_UserSolitaireResult]
	MESSAGE_SC_BURRACO_SUB_ID_MSGID_SC_BURRACO_USER_DISCARD_RESULT   MESSAGE_SC_BURRACO_SUB_ID = 1013 //玩家弃牌结果          [MSG_SC_BURRACO_UserDiscardResult]
	MESSAGE_SC_BURRACO_SUB_ID_MSGID_SC_BURRACO_SEND_USER_POT_CARDS   MESSAGE_SC_BURRACO_SUB_ID = 1014 //玩家打完第一轮,发送交叉牌堆的牌[MSG_SC_BURRACO_SendUserPOTCards]
)

// Enum value maps for MESSAGE_SC_BURRACO_SUB_ID.
var (
	MESSAGE_SC_BURRACO_SUB_ID_name = map[int32]string{
		1000: "MSGID_SC_BURRACO_GAME_START_DATA",
		1001: "MSGID_SC_BURRACO_SEND_HAND_CARD",
		1003: "MSGID_SC_BURRACO_INFORM_USEROP",
		1005: "MSGID_SC_BURRACO_GAME_RESULT",
		1006: "MSGID_SC_BURRACO_GAMESCENCE_PLAY",
		1007: "MSGID_SC_BURRACO_GAMESCENCE_FREE",
		1008: "MSGID_SC_BURRACO_ROBOT_GAME_RESULT",
		1011: "MSGID_SC_BURRACO_USER_GET_CARD_RESULT",
		1012: "MSGID_SC_BURRACO_USER_SOLITAIRE_RESULT",
		1013: "MSGID_SC_BURRACO_USER_DISCARD_RESULT",
		1014: "MSGID_SC_BURRACO_SEND_USER_POT_CARDS",
	}
	MESSAGE_SC_BURRACO_SUB_ID_value = map[string]int32{
		"MSGID_SC_BURRACO_GAME_START_DATA":       1000,
		"MSGID_SC_BURRACO_SEND_HAND_CARD":        1001,
		"MSGID_SC_BURRACO_INFORM_USEROP":         1003,
		"MSGID_SC_BURRACO_GAME_RESULT":           1005,
		"MSGID_SC_BURRACO_GAMESCENCE_PLAY":       1006,
		"MSGID_SC_BURRACO_GAMESCENCE_FREE":       1007,
		"MSGID_SC_BURRACO_ROBOT_GAME_RESULT":     1008,
		"MSGID_SC_BURRACO_USER_GET_CARD_RESULT":  1011,
		"MSGID_SC_BURRACO_USER_SOLITAIRE_RESULT": 1012,
		"MSGID_SC_BURRACO_USER_DISCARD_RESULT":   1013,
		"MSGID_SC_BURRACO_SEND_USER_POT_CARDS":   1014,
	}
)

func (x MESSAGE_SC_BURRACO_SUB_ID) Enum() *MESSAGE_SC_BURRACO_SUB_ID {
	p := new(MESSAGE_SC_BURRACO_SUB_ID)
	*p = x
	return p
}

func (x MESSAGE_SC_BURRACO_SUB_ID) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (MESSAGE_SC_BURRACO_SUB_ID) Descriptor() protoreflect.EnumDescriptor {
	return file_preson_proto_enumTypes[1].Descriptor()
}

func (MESSAGE_SC_BURRACO_SUB_ID) Type() protoreflect.EnumType {
	return &file_preson_proto_enumTypes[1]
}

func (x MESSAGE_SC_BURRACO_SUB_ID) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *MESSAGE_SC_BURRACO_SUB_ID) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = MESSAGE_SC_BURRACO_SUB_ID(num)
	return nil
}

// Deprecated: Use MESSAGE_SC_BURRACO_SUB_ID.Descriptor instead.
func (MESSAGE_SC_BURRACO_SUB_ID) EnumDescriptor() ([]byte, []int) {
	return file_preson_proto_rawDescGZIP(), []int{1}
}

//客户端发送服务器
type MESSAGE_CS_BURRACO_SUB_ID int32

const (
	MESSAGE_CS_BURRACO_SUB_ID_MSGID_CS_BURRACO_USER_GET_CARD  MESSAGE_CS_BURRACO_SUB_ID = 2001 // 玩家拿牌(弃牌堆,剩余牌堆)[MSG_CS_BURRACO_UserGetCard]
	MESSAGE_CS_BURRACO_SUB_ID_MSGID_CS_BURRACO_USER_SOLITAIRE MESSAGE_CS_BURRACO_SUB_ID = 2002 //玩家组牌接龙solitaire          [MSG_CS_BURRACO_UserSolitaire]
	MESSAGE_CS_BURRACO_SUB_ID_MSGID_CS_BURRACO_USER_DISCARD   MESSAGE_CS_BURRACO_SUB_ID = 2003 //玩家弃牌            [MSG_CS_BURRACO_UserDiscard]
	MESSAGE_CS_BURRACO_SUB_ID_MSGID_CS_BURRACO_USER_GAME_END  MESSAGE_CS_BURRACO_SUB_ID = 2004 //玩家结算 [MSG_CS_BURRACO_UserGameEnd]
	MESSAGE_CS_BURRACO_SUB_ID_MSGID_CS_BURRACO_ROBOT_GAME_END MESSAGE_CS_BURRACO_SUB_ID = 2008 //机器人退出 主动结算 [MSG_CS_BURRACO_RobotGameEnd]
)

// Enum value maps for MESSAGE_CS_BURRACO_SUB_ID.
var (
	MESSAGE_CS_BURRACO_SUB_ID_name = map[int32]string{
		2001: "MSGID_CS_BURRACO_USER_GET_CARD",
		2002: "MSGID_CS_BURRACO_USER_SOLITAIRE",
		2003: "MSGID_CS_BURRACO_USER_DISCARD",
		2004: "MSGID_CS_BURRACO_USER_GAME_END",
		2008: "MSGID_CS_BURRACO_ROBOT_GAME_END",
	}
	MESSAGE_CS_BURRACO_SUB_ID_value = map[string]int32{
		"MSGID_CS_BURRACO_USER_GET_CARD":  2001,
		"MSGID_CS_BURRACO_USER_SOLITAIRE": 2002,
		"MSGID_CS_BURRACO_USER_DISCARD":   2003,
		"MSGID_CS_BURRACO_USER_GAME_END":  2004,
		"MSGID_CS_BURRACO_ROBOT_GAME_END": 2008,
	}
)

func (x MESSAGE_CS_BURRACO_SUB_ID) Enum() *MESSAGE_CS_BURRACO_SUB_ID {
	p := new(MESSAGE_CS_BURRACO_SUB_ID)
	*p = x
	return p
}

func (x MESSAGE_CS_BURRACO_SUB_ID) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (MESSAGE_CS_BURRACO_SUB_ID) Descriptor() protoreflect.EnumDescriptor {
	return file_preson_proto_enumTypes[2].Descriptor()
}

func (MESSAGE_CS_BURRACO_SUB_ID) Type() protoreflect.EnumType {
	return &file_preson_proto_enumTypes[2]
}

func (x MESSAGE_CS_BURRACO_SUB_ID) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *MESSAGE_CS_BURRACO_SUB_ID) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = MESSAGE_CS_BURRACO_SUB_ID(num)
	return nil
}

// Deprecated: Use MESSAGE_CS_BURRACO_SUB_ID.Descriptor instead.
func (MESSAGE_CS_BURRACO_SUB_ID) EnumDescriptor() ([]byte, []int) {
	return file_preson_proto_rawDescGZIP(), []int{2}
}

// 常量定义
type BURRACO_CONST int32

const (
	BURRACO_CONST_BURRACO_GAME_PLAYER           BURRACO_CONST = 4  //玩家人数
	BURRACO_CONST_BURRACO_SEND_HAND_CARD_COUNT  BURRACO_CONST = 11 //每轮发手牌的数量
	BURRACO_CONST_BURRACO_SEND_TABLE_CARD_COUNT BURRACO_CONST = 1  // 开局第一张牌放入弃牌区
)

// Enum value maps for BURRACO_CONST.
var (
	BURRACO_CONST_name = map[int32]string{
		4:  "BURRACO_GAME_PLAYER",
		11: "BURRACO_SEND_HAND_CARD_COUNT",
		1:  "BURRACO_SEND_TABLE_CARD_COUNT",
	}
	BURRACO_CONST_value = map[string]int32{
		"BURRACO_GAME_PLAYER":           4,
		"BURRACO_SEND_HAND_CARD_COUNT":  11,
		"BURRACO_SEND_TABLE_CARD_COUNT": 1,
	}
)

func (x BURRACO_CONST) Enum() *BURRACO_CONST {
	p := new(BURRACO_CONST)
	*p = x
	return p
}

func (x BURRACO_CONST) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (BURRACO_CONST) Descriptor() protoreflect.EnumDescriptor {
	return file_preson_proto_enumTypes[3].Descriptor()
}

func (BURRACO_CONST) Type() protoreflect.EnumType {
	return &file_preson_proto_enumTypes[3]
}

func (x BURRACO_CONST) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *BURRACO_CONST) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = BURRACO_CONST(num)
	return nil
}

// Deprecated: Use BURRACO_CONST.Descriptor instead.
func (BURRACO_CONST) EnumDescriptor() ([]byte, []int) {
	return file_preson_proto_rawDescGZIP(), []int{3}
}

//动作类型
type BURRACO_ACTION_TYPE int32

const (
	BURRACO_ACTION_TYPE_MSG_BURRACO_ACTION_DISCARD      BURRACO_ACTION_TYPE = 1 //弃牌
	BURRACO_ACTION_TYPE_MSG_BURRACO_ACTION_GETTABLECARD BURRACO_ACTION_TYPE = 2 //摸底牌
	BURRACO_ACTION_TYPE_MSG_BURRACO_ACTION_GETDISCARD   BURRACO_ACTION_TYPE = 3 //摸弃牌
	BURRACO_ACTION_TYPE_MSG_BURRACO_ACTION_GROUPCARD    BURRACO_ACTION_TYPE = 4 //组牌
)

// Enum value maps for BURRACO_ACTION_TYPE.
var (
	BURRACO_ACTION_TYPE_name = map[int32]string{
		1: "MSG_BURRACO_ACTION_DISCARD",
		2: "MSG_BURRACO_ACTION_GETTABLECARD",
		3: "MSG_BURRACO_ACTION_GETDISCARD",
		4: "MSG_BURRACO_ACTION_GROUPCARD",
	}
	BURRACO_ACTION_TYPE_value = map[string]int32{
		"MSG_BURRACO_ACTION_DISCARD":      1,
		"MSG_BURRACO_ACTION_GETTABLECARD": 2,
		"MSG_BURRACO_ACTION_GETDISCARD":   3,
		"MSG_BURRACO_ACTION_GROUPCARD":    4,
	}
)

func (x BURRACO_ACTION_TYPE) Enum() *BURRACO_ACTION_TYPE {
	p := new(BURRACO_ACTION_TYPE)
	*p = x
	return p
}

func (x BURRACO_ACTION_TYPE) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (BURRACO_ACTION_TYPE) Descriptor() protoreflect.EnumDescriptor {
	return file_preson_proto_enumTypes[4].Descriptor()
}

func (BURRACO_ACTION_TYPE) Type() protoreflect.EnumType {
	return &file_preson_proto_enumTypes[4]
}

func (x BURRACO_ACTION_TYPE) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *BURRACO_ACTION_TYPE) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = BURRACO_ACTION_TYPE(num)
	return nil
}

// Deprecated: Use BURRACO_ACTION_TYPE.Descriptor instead.
func (BURRACO_ACTION_TYPE) EnumDescriptor() ([]byte, []int) {
	return file_preson_proto_rawDescGZIP(), []int{4}
}

//抓牌的来源
type BURRACO_PICK_FROM int32

const (
	BURRACO_PICK_FROM_MSG_FROM_DESK   BURRACO_PICK_FROM = 1 //从桌面抓牌
	BURRACO_PICK_FROM_MSG_FROM_GIVEUP BURRACO_PICK_FROM = 2 //从弃牌堆抓牌
)

// Enum value maps for BURRACO_PICK_FROM.
var (
	BURRACO_PICK_FROM_name = map[int32]string{
		1: "MSG_FROM_DESK",
		2: "MSG_FROM_GIVEUP",
	}
	BURRACO_PICK_FROM_value = map[string]int32{
		"MSG_FROM_DESK":   1,
		"MSG_FROM_GIVEUP": 2,
	}
)

func (x BURRACO_PICK_FROM) Enum() *BURRACO_PICK_FROM {
	p := new(BURRACO_PICK_FROM)
	*p = x
	return p
}

func (x BURRACO_PICK_FROM) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (BURRACO_PICK_FROM) Descriptor() protoreflect.EnumDescriptor {
	return file_preson_proto_enumTypes[5].Descriptor()
}

func (BURRACO_PICK_FROM) Type() protoreflect.EnumType {
	return &file_preson_proto_enumTypes[5]
}

func (x BURRACO_PICK_FROM) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *BURRACO_PICK_FROM) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = BURRACO_PICK_FROM(num)
	return nil
}

// Deprecated: Use BURRACO_PICK_FROM.Descriptor instead.
func (BURRACO_PICK_FROM) EnumDescriptor() ([]byte, []int) {
	return file_preson_proto_rawDescGZIP(), []int{5}
}

//游戏状态
type BURRACO_GAME_STATUS int32

const (
	BURRACO_GAME_STATUS_MSG_BURRACO_GAME_STATUS_FREE      BURRACO_GAME_STATUS = 1 //空闲状态[不能抓牌组牌弃牌]
	BURRACO_GAME_STATUS_MSG_BURRACO_GAME_STATUS_SEND_CARD BURRACO_GAME_STATUS = 2 //发牌状态
	BURRACO_GAME_STATUS_MSG_BURRACO_GAME_STATUS_GET_CARDS BURRACO_GAME_STATUS = 3 //抓牌状态
	BURRACO_GAME_STATUS_MSG_BURRACO_GAME_STATUS_SOLITAIRE BURRACO_GAME_STATUS = 4 //组牌状态[solitaire 接龙]
	BURRACO_GAME_STATUS_MSG_BURRACO_GAME_STATUS_DISCARDS  BURRACO_GAME_STATUS = 5 //弃牌状态[这个可以没有的]
)

// Enum value maps for BURRACO_GAME_STATUS.
var (
	BURRACO_GAME_STATUS_name = map[int32]string{
		1: "MSG_BURRACO_GAME_STATUS_FREE",
		2: "MSG_BURRACO_GAME_STATUS_SEND_CARD",
		3: "MSG_BURRACO_GAME_STATUS_GET_CARDS",
		4: "MSG_BURRACO_GAME_STATUS_SOLITAIRE",
		5: "MSG_BURRACO_GAME_STATUS_DISCARDS",
	}
	BURRACO_GAME_STATUS_value = map[string]int32{
		"MSG_BURRACO_GAME_STATUS_FREE":      1,
		"MSG_BURRACO_GAME_STATUS_SEND_CARD": 2,
		"MSG_BURRACO_GAME_STATUS_GET_CARDS": 3,
		"MSG_BURRACO_GAME_STATUS_SOLITAIRE": 4,
		"MSG_BURRACO_GAME_STATUS_DISCARDS":  5,
	}
)

func (x BURRACO_GAME_STATUS) Enum() *BURRACO_GAME_STATUS {
	p := new(BURRACO_GAME_STATUS)
	*p = x
	return p
}

func (x BURRACO_GAME_STATUS) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (BURRACO_GAME_STATUS) Descriptor() protoreflect.EnumDescriptor {
	return file_preson_proto_enumTypes[6].Descriptor()
}

func (BURRACO_GAME_STATUS) Type() protoreflect.EnumType {
	return &file_preson_proto_enumTypes[6]
}

func (x BURRACO_GAME_STATUS) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *BURRACO_GAME_STATUS) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = BURRACO_GAME_STATUS(num)
	return nil
}

// Deprecated: Use BURRACO_GAME_STATUS.Descriptor instead.
func (BURRACO_GAME_STATUS) EnumDescriptor() ([]byte, []int) {
	return file_preson_proto_rawDescGZIP(), []int{6}
}

//游戏开始数据
type MSG_SC_BURRACO_GameStartData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DwCardNum   *uint32 `protobuf:"varint,1,req,name=dwCardNum" json:"dwCardNum,omitempty"`     // 牌总数
	DwBaseScore *uint32 `protobuf:"varint,2,req,name=dwBaseScore" json:"dwBaseScore,omitempty"` // 底分
}

func (x *MSG_SC_BURRACO_GameStartData) Reset() {
	*x = MSG_SC_BURRACO_GameStartData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_preson_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MSG_SC_BURRACO_GameStartData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MSG_SC_BURRACO_GameStartData) ProtoMessage() {}

func (x *MSG_SC_BURRACO_GameStartData) ProtoReflect() protoreflect.Message {
	mi := &file_preson_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MSG_SC_BURRACO_GameStartData.ProtoReflect.Descriptor instead.
func (*MSG_SC_BURRACO_GameStartData) Descriptor() ([]byte, []int) {
	return file_preson_proto_rawDescGZIP(), []int{0}
}

func (x *MSG_SC_BURRACO_GameStartData) GetDwCardNum() uint32 {
	if x != nil && x.DwCardNum != nil {
		return *x.DwCardNum
	}
	return 0
}

func (x *MSG_SC_BURRACO_GameStartData) GetDwBaseScore() uint32 {
	if x != nil && x.DwBaseScore != nil {
		return *x.DwBaseScore
	}
	return 0
}

// 组牌区数据 (摆牌区域)
type GroupCardData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DwGroupIndex     *uint32  `protobuf:"varint,1,req,name=dwGroupIndex" json:"dwGroupIndex,omitempty"`         // 第几组牌
	DwGroupIndexData []uint32 `protobuf:"varint,2,rep,name=dwGroupIndexData" json:"dwGroupIndexData,omitempty"` // 这一组  牌的数据
}

func (x *GroupCardData) Reset() {
	*x = GroupCardData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_preson_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GroupCardData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GroupCardData) ProtoMessage() {}

func (x *GroupCardData) ProtoReflect() protoreflect.Message {
	mi := &file_preson_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GroupCardData.ProtoReflect.Descriptor instead.
func (*GroupCardData) Descriptor() ([]byte, []int) {
	return file_preson_proto_rawDescGZIP(), []int{1}
}

func (x *GroupCardData) GetDwGroupIndex() uint32 {
	if x != nil && x.DwGroupIndex != nil {
		return *x.DwGroupIndex
	}
	return 0
}

func (x *GroupCardData) GetDwGroupIndexData() []uint32 {
	if x != nil {
		return x.DwGroupIndexData
	}
	return nil
}

//桌面通用数据
type MSG_DeskData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DwTableCardsCount     *uint32          `protobuf:"varint,1,req,name=dwTableCardsCount" json:"dwTableCardsCount,omitempty"`         // 桌面上底牌数量
	TabDiscardDataList    []uint32         `protobuf:"varint,2,rep,name=tabDiscardDataList" json:"tabDiscardDataList,omitempty"`       // 弃牌区域的牌
	TabGroupCardDataList1 []*GroupCardData `protobuf:"bytes,3,rep,name=tabGroupCardDataList1" json:"tabGroupCardDataList1,omitempty"`  // 1队伍 组牌区域的牌
	TabGroupCardDataList2 []*GroupCardData `protobuf:"bytes,4,rep,name=tabGroupCardDataList2" json:"tabGroupCardDataList2,omitempty"`  // 2队伍 组牌区域的牌
	DwScore1              *uint32          `protobuf:"varint,5,opt,name=dwScore1" json:"dwScore1,omitempty"`                           // 1队伍 实时分数
	DwScore2              *uint32          `protobuf:"varint,6,opt,name=dwScore2" json:"dwScore2,omitempty"`                           // 2队伍 实时分数
	DwPOTCount1           *uint32          `protobuf:"varint,7,opt,name=dwPOTCount1" json:"dwPOTCount1,omitempty"`                     // 1队伍交叉牌堆数量[0,1]11张牌
	DwPOTCount2           *uint32          `protobuf:"varint,8,opt,name=dwPOTCount2" json:"dwPOTCount2,omitempty"`                     // 2队伍交叉牌堆数量[0,1]
	TabLastGetDiscardList []uint32         `protobuf:"varint,9,rep,name=tabLastGetDiscardList" json:"tabLastGetDiscardList,omitempty"` // 上次拿弃牌区的数据
}

func (x *MSG_DeskData) Reset() {
	*x = MSG_DeskData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_preson_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MSG_DeskData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MSG_DeskData) ProtoMessage() {}

func (x *MSG_DeskData) ProtoReflect() protoreflect.Message {
	mi := &file_preson_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MSG_DeskData.ProtoReflect.Descriptor instead.
func (*MSG_DeskData) Descriptor() ([]byte, []int) {
	return file_preson_proto_rawDescGZIP(), []int{2}
}

func (x *MSG_DeskData) GetDwTableCardsCount() uint32 {
	if x != nil && x.DwTableCardsCount != nil {
		return *x.DwTableCardsCount
	}
	return 0
}

func (x *MSG_DeskData) GetTabDiscardDataList() []uint32 {
	if x != nil {
		return x.TabDiscardDataList
	}
	return nil
}

func (x *MSG_DeskData) GetTabGroupCardDataList1() []*GroupCardData {
	if x != nil {
		return x.TabGroupCardDataList1
	}
	return nil
}

func (x *MSG_DeskData) GetTabGroupCardDataList2() []*GroupCardData {
	if x != nil {
		return x.TabGroupCardDataList2
	}
	return nil
}

func (x *MSG_DeskData) GetDwScore1() uint32 {
	if x != nil && x.DwScore1 != nil {
		return *x.DwScore1
	}
	return 0
}

func (x *MSG_DeskData) GetDwScore2() uint32 {
	if x != nil && x.DwScore2 != nil {
		return *x.DwScore2
	}
	return 0
}

func (x *MSG_DeskData) GetDwPOTCount1() uint32 {
	if x != nil && x.DwPOTCount1 != nil {
		return *x.DwPOTCount1
	}
	return 0
}

func (x *MSG_DeskData) GetDwPOTCount2() uint32 {
	if x != nil && x.DwPOTCount2 != nil {
		return *x.DwPOTCount2
	}
	return 0
}

func (x *MSG_DeskData) GetTabLastGetDiscardList() []uint32 {
	if x != nil {
		return x.TabLastGetDiscardList
	}
	return nil
}

// 玩家游戏数据
type MSG_PlayerGameingData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TabHandCountData *uint32 `protobuf:"varint,1,req,name=tabHandCountData" json:"tabHandCountData,omitempty"` //该玩家手牌的数量
	DwTeam           *uint32 `protobuf:"varint,2,req,name=dwTeam" json:"dwTeam,omitempty"`                     //所在队伍
}

func (x *MSG_PlayerGameingData) Reset() {
	*x = MSG_PlayerGameingData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_preson_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MSG_PlayerGameingData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MSG_PlayerGameingData) ProtoMessage() {}

func (x *MSG_PlayerGameingData) ProtoReflect() protoreflect.Message {
	mi := &file_preson_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MSG_PlayerGameingData.ProtoReflect.Descriptor instead.
func (*MSG_PlayerGameingData) Descriptor() ([]byte, []int) {
	return file_preson_proto_rawDescGZIP(), []int{3}
}

func (x *MSG_PlayerGameingData) GetTabHandCountData() uint32 {
	if x != nil && x.TabHandCountData != nil {
		return *x.TabHandCountData
	}
	return 0
}

func (x *MSG_PlayerGameingData) GetDwTeam() uint32 {
	if x != nil && x.DwTeam != nil {
		return *x.DwTeam
	}
	return 0
}

//发送手牌
type MSG_SC_BURRACO_SendHandCard struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DeskInfo   *MSG_DeskData            `protobuf:"bytes,1,req,name=DeskInfo" json:"DeskInfo,omitempty"`      // 桌面通用信息
	PlayerInfo []*MSG_PlayerGameingData `protobuf:"bytes,2,rep,name=PlayerInfo" json:"PlayerInfo,omitempty"`  // 各玩家游戏数据
	DwChairID  *uint32                  `protobuf:"varint,3,req,name=dwChairID" json:"dwChairID,omitempty"`   // 最先发牌座位号
	DwCardNum  *uint32                  `protobuf:"varint,4,req,name=dwCardNum" json:"dwCardNum,omitempty"`   // 手牌数量
	DwCardData []uint32                 `protobuf:"varint,5,rep,name=dwCardData" json:"dwCardData,omitempty"` // 手牌列表
}

func (x *MSG_SC_BURRACO_SendHandCard) Reset() {
	*x = MSG_SC_BURRACO_SendHandCard{}
	if protoimpl.UnsafeEnabled {
		mi := &file_preson_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MSG_SC_BURRACO_SendHandCard) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MSG_SC_BURRACO_SendHandCard) ProtoMessage() {}

func (x *MSG_SC_BURRACO_SendHandCard) ProtoReflect() protoreflect.Message {
	mi := &file_preson_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MSG_SC_BURRACO_SendHandCard.ProtoReflect.Descriptor instead.
func (*MSG_SC_BURRACO_SendHandCard) Descriptor() ([]byte, []int) {
	return file_preson_proto_rawDescGZIP(), []int{4}
}

func (x *MSG_SC_BURRACO_SendHandCard) GetDeskInfo() *MSG_DeskData {
	if x != nil {
		return x.DeskInfo
	}
	return nil
}

func (x *MSG_SC_BURRACO_SendHandCard) GetPlayerInfo() []*MSG_PlayerGameingData {
	if x != nil {
		return x.PlayerInfo
	}
	return nil
}

func (x *MSG_SC_BURRACO_SendHandCard) GetDwChairID() uint32 {
	if x != nil && x.DwChairID != nil {
		return *x.DwChairID
	}
	return 0
}

func (x *MSG_SC_BURRACO_SendHandCard) GetDwCardNum() uint32 {
	if x != nil && x.DwCardNum != nil {
		return *x.DwCardNum
	}
	return 0
}

func (x *MSG_SC_BURRACO_SendHandCard) GetDwCardData() []uint32 {
	if x != nil {
		return x.DwCardData
	}
	return nil
}

//游戏结算后各玩家相关信息
type MSG_BURRACOUserSettleInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DwChairID      *uint32 `protobuf:"varint,1,req,name=dwChairID" json:"dwChairID,omitempty"`           //玩家椅子ID
	DwGold         *int32  `protobuf:"varint,2,opt,name=dwGold" json:"dwGold,omitempty"`                 //获得的金币数
	DwTotalScore   *int32  `protobuf:"varint,3,opt,name=dwTotalScore" json:"dwTotalScore,omitempty"`     //最后得分
	DwCleanBurraco *int32  `protobuf:"varint,4,opt,name=dwCleanBurraco" json:"dwCleanBurraco,omitempty"` // 无鬼长组合得分
	DwDirtyBurraco *int32  `protobuf:"varint,5,opt,name=dwDirtyBurraco" json:"dwDirtyBurraco,omitempty"` // 有鬼长组合得分
	DwTableScore   *int32  `protobuf:"varint,6,opt,name=dwTableScore" json:"dwTableScore,omitempty"`     // 所有组合里牌的分值之和
	DwCardsInHand  *int32  `protobuf:"varint,7,opt,name=dwCardsInHand" json:"dwCardsInHand,omitempty"`   // 减所有手牌里的分值之和(负数)
	DwPOT          *int32  `protobuf:"varint,8,opt,name=dwPOT" json:"dwPOT,omitempty"`                   // 所属队伍是否拿过交叉牌堆里的牌[拿过:0 没拿过:-100]
	DwClosing      *int32  `protobuf:"varint,9,opt,name=dwClosing" json:"dwClosing,omitempty"`           // 队伍里有人打完牌+100
}

func (x *MSG_BURRACOUserSettleInfo) Reset() {
	*x = MSG_BURRACOUserSettleInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_preson_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MSG_BURRACOUserSettleInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MSG_BURRACOUserSettleInfo) ProtoMessage() {}

func (x *MSG_BURRACOUserSettleInfo) ProtoReflect() protoreflect.Message {
	mi := &file_preson_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MSG_BURRACOUserSettleInfo.ProtoReflect.Descriptor instead.
func (*MSG_BURRACOUserSettleInfo) Descriptor() ([]byte, []int) {
	return file_preson_proto_rawDescGZIP(), []int{5}
}

func (x *MSG_BURRACOUserSettleInfo) GetDwChairID() uint32 {
	if x != nil && x.DwChairID != nil {
		return *x.DwChairID
	}
	return 0
}

func (x *MSG_BURRACOUserSettleInfo) GetDwGold() int32 {
	if x != nil && x.DwGold != nil {
		return *x.DwGold
	}
	return 0
}

func (x *MSG_BURRACOUserSettleInfo) GetDwTotalScore() int32 {
	if x != nil && x.DwTotalScore != nil {
		return *x.DwTotalScore
	}
	return 0
}

func (x *MSG_BURRACOUserSettleInfo) GetDwCleanBurraco() int32 {
	if x != nil && x.DwCleanBurraco != nil {
		return *x.DwCleanBurraco
	}
	return 0
}

func (x *MSG_BURRACOUserSettleInfo) GetDwDirtyBurraco() int32 {
	if x != nil && x.DwDirtyBurraco != nil {
		return *x.DwDirtyBurraco
	}
	return 0
}

func (x *MSG_BURRACOUserSettleInfo) GetDwTableScore() int32 {
	if x != nil && x.DwTableScore != nil {
		return *x.DwTableScore
	}
	return 0
}

func (x *MSG_BURRACOUserSettleInfo) GetDwCardsInHand() int32 {
	if x != nil && x.DwCardsInHand != nil {
		return *x.DwCardsInHand
	}
	return 0
}

func (x *MSG_BURRACOUserSettleInfo) GetDwPOT() int32 {
	if x != nil && x.DwPOT != nil {
		return *x.DwPOT
	}
	return 0
}

func (x *MSG_BURRACOUserSettleInfo) GetDwClosing() int32 {
	if x != nil && x.DwClosing != nil {
		return *x.DwClosing
	}
	return 0
}

//游戏结算
type MSG_SC_BURRACO_GameResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DwWinnerGroupID       *uint32                      `protobuf:"varint,1,req,name=dwWinnerGroupID" json:"dwWinnerGroupID,omitempty"`            //赢家队伍ID  1或者2
	DwWinnerChairID       []uint32                     `protobuf:"varint,2,rep,name=dwWinnerChairID" json:"dwWinnerChairID,omitempty"`            //赢家椅子ID
	TabUserSettleInfoList []*MSG_BURRACOUserSettleInfo `protobuf:"bytes,3,rep,name=tabUserSettleInfoList" json:"tabUserSettleInfoList,omitempty"` //玩家列表
}

func (x *MSG_SC_BURRACO_GameResult) Reset() {
	*x = MSG_SC_BURRACO_GameResult{}
	if protoimpl.UnsafeEnabled {
		mi := &file_preson_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MSG_SC_BURRACO_GameResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MSG_SC_BURRACO_GameResult) ProtoMessage() {}

func (x *MSG_SC_BURRACO_GameResult) ProtoReflect() protoreflect.Message {
	mi := &file_preson_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MSG_SC_BURRACO_GameResult.ProtoReflect.Descriptor instead.
func (*MSG_SC_BURRACO_GameResult) Descriptor() ([]byte, []int) {
	return file_preson_proto_rawDescGZIP(), []int{6}
}

func (x *MSG_SC_BURRACO_GameResult) GetDwWinnerGroupID() uint32 {
	if x != nil && x.DwWinnerGroupID != nil {
		return *x.DwWinnerGroupID
	}
	return 0
}

func (x *MSG_SC_BURRACO_GameResult) GetDwWinnerChairID() []uint32 {
	if x != nil {
		return x.DwWinnerChairID
	}
	return nil
}

func (x *MSG_SC_BURRACO_GameResult) GetTabUserSettleInfoList() []*MSG_BURRACOUserSettleInfo {
	if x != nil {
		return x.TabUserSettleInfoList
	}
	return nil
}

//游戏场景(断线重连)
type MSG_SC_BURRACO_GamePlay struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DwBaseScore      *uint32                  `protobuf:"varint,1,req,name=dwBaseScore" json:"dwBaseScore,omitempty"`           //底分
	DwCurrentChairID *uint32                  `protobuf:"varint,2,req,name=dwCurrentChairID" json:"dwCurrentChairID,omitempty"` //当前操作玩家椅子ID
	GameState        *uint32                  `protobuf:"varint,3,req,name=gameState" json:"gameState,omitempty"`               //当前操作阶段
	DwOppTime        *uint32                  `protobuf:"varint,4,req,name=dwOppTime" json:"dwOppTime,omitempty"`               //操作倒计时
	DwHandCard       []uint32                 `protobuf:"varint,5,rep,name=dwHandCard" json:"dwHandCard,omitempty"`             //手牌列表
	PlayerInfo       []*MSG_PlayerGameingData `protobuf:"bytes,6,rep,name=PlayerInfo" json:"PlayerInfo,omitempty"`              //玩家游戏数据
	DeskInfo         *MSG_DeskData            `protobuf:"bytes,7,req,name=DeskInfo" json:"DeskInfo,omitempty"`                  //桌面游戏数据
}

func (x *MSG_SC_BURRACO_GamePlay) Reset() {
	*x = MSG_SC_BURRACO_GamePlay{}
	if protoimpl.UnsafeEnabled {
		mi := &file_preson_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MSG_SC_BURRACO_GamePlay) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MSG_SC_BURRACO_GamePlay) ProtoMessage() {}

func (x *MSG_SC_BURRACO_GamePlay) ProtoReflect() protoreflect.Message {
	mi := &file_preson_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MSG_SC_BURRACO_GamePlay.ProtoReflect.Descriptor instead.
func (*MSG_SC_BURRACO_GamePlay) Descriptor() ([]byte, []int) {
	return file_preson_proto_rawDescGZIP(), []int{7}
}

func (x *MSG_SC_BURRACO_GamePlay) GetDwBaseScore() uint32 {
	if x != nil && x.DwBaseScore != nil {
		return *x.DwBaseScore
	}
	return 0
}

func (x *MSG_SC_BURRACO_GamePlay) GetDwCurrentChairID() uint32 {
	if x != nil && x.DwCurrentChairID != nil {
		return *x.DwCurrentChairID
	}
	return 0
}

func (x *MSG_SC_BURRACO_GamePlay) GetGameState() uint32 {
	if x != nil && x.GameState != nil {
		return *x.GameState
	}
	return 0
}

func (x *MSG_SC_BURRACO_GamePlay) GetDwOppTime() uint32 {
	if x != nil && x.DwOppTime != nil {
		return *x.DwOppTime
	}
	return 0
}

func (x *MSG_SC_BURRACO_GamePlay) GetDwHandCard() []uint32 {
	if x != nil {
		return x.DwHandCard
	}
	return nil
}

func (x *MSG_SC_BURRACO_GamePlay) GetPlayerInfo() []*MSG_PlayerGameingData {
	if x != nil {
		return x.PlayerInfo
	}
	return nil
}

func (x *MSG_SC_BURRACO_GamePlay) GetDeskInfo() *MSG_DeskData {
	if x != nil {
		return x.DeskInfo
	}
	return nil
}

//通知玩家操作
type MSG_SC_BURRACO_InformUserOP struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DwChairID *uint32 `protobuf:"varint,1,req,name=dwChairID" json:"dwChairID,omitempty"` //操作玩家椅子ID
	DwOppTime *uint32 `protobuf:"varint,2,req,name=dwOppTime" json:"dwOppTime,omitempty"` //操作倒计时
	DwStatus  *uint32 `protobuf:"varint,3,opt,name=dwStatus" json:"dwStatus,omitempty"`   //操作状态
}

func (x *MSG_SC_BURRACO_InformUserOP) Reset() {
	*x = MSG_SC_BURRACO_InformUserOP{}
	if protoimpl.UnsafeEnabled {
		mi := &file_preson_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MSG_SC_BURRACO_InformUserOP) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MSG_SC_BURRACO_InformUserOP) ProtoMessage() {}

func (x *MSG_SC_BURRACO_InformUserOP) ProtoReflect() protoreflect.Message {
	mi := &file_preson_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MSG_SC_BURRACO_InformUserOP.ProtoReflect.Descriptor instead.
func (*MSG_SC_BURRACO_InformUserOP) Descriptor() ([]byte, []int) {
	return file_preson_proto_rawDescGZIP(), []int{8}
}

func (x *MSG_SC_BURRACO_InformUserOP) GetDwChairID() uint32 {
	if x != nil && x.DwChairID != nil {
		return *x.DwChairID
	}
	return 0
}

func (x *MSG_SC_BURRACO_InformUserOP) GetDwOppTime() uint32 {
	if x != nil && x.DwOppTime != nil {
		return *x.DwOppTime
	}
	return 0
}

func (x *MSG_SC_BURRACO_InformUserOP) GetDwStatus() uint32 {
	if x != nil && x.DwStatus != nil {
		return *x.DwStatus
	}
	return 0
}

//玩家拿牌
type MSG_CS_BURRACO_UserGetCard struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DwChairID *uint32  `protobuf:"varint,1,req,name=dwChairID" json:"dwChairID,omitempty"` //操作玩家椅子ID
	DwGetType *uint32  `protobuf:"varint,2,req,name=dwGetType" json:"dwGetType,omitempty"` //拿了哪里的牌[1:剩余牌堆  2:弃牌堆]
	DwCards   []uint32 `protobuf:"varint,3,rep,name=dwCards" json:"dwCards,omitempty"`     //牌值数据
}

func (x *MSG_CS_BURRACO_UserGetCard) Reset() {
	*x = MSG_CS_BURRACO_UserGetCard{}
	if protoimpl.UnsafeEnabled {
		mi := &file_preson_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MSG_CS_BURRACO_UserGetCard) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MSG_CS_BURRACO_UserGetCard) ProtoMessage() {}

func (x *MSG_CS_BURRACO_UserGetCard) ProtoReflect() protoreflect.Message {
	mi := &file_preson_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MSG_CS_BURRACO_UserGetCard.ProtoReflect.Descriptor instead.
func (*MSG_CS_BURRACO_UserGetCard) Descriptor() ([]byte, []int) {
	return file_preson_proto_rawDescGZIP(), []int{9}
}

func (x *MSG_CS_BURRACO_UserGetCard) GetDwChairID() uint32 {
	if x != nil && x.DwChairID != nil {
		return *x.DwChairID
	}
	return 0
}

func (x *MSG_CS_BURRACO_UserGetCard) GetDwGetType() uint32 {
	if x != nil && x.DwGetType != nil {
		return *x.DwGetType
	}
	return 0
}

func (x *MSG_CS_BURRACO_UserGetCard) GetDwCards() []uint32 {
	if x != nil {
		return x.DwCards
	}
	return nil
}

//玩家拿牌结果
type MSG_SC_BURRACO_UserGetCardResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ICode        *uint32  `protobuf:"varint,1,req,name=iCode" json:"iCode,omitempty"`               // 玩家拿牌结果[0:可以拿牌 1:不能拿牌]
	DwChairID    *uint32  `protobuf:"varint,2,opt,name=dwChairID" json:"dwChairID,omitempty"`       //操作玩家椅子ID
	DwUserID     *uint32  `protobuf:"varint,3,opt,name=dwUserID" json:"dwUserID,omitempty"`         //操作的玩家ID
	DwGetType    *uint32  `protobuf:"varint,4,opt,name=dwGetType" json:"dwGetType,omitempty"`       //拿了哪里的牌[1:剩余牌堆  2:弃牌堆]
	DwCards      []uint32 `protobuf:"varint,5,rep,name=dwCards" json:"dwCards,omitempty"`           //牌值数据[从剩余牌堆拿的数据只有操作者知道]
	DwTableCount *uint32  `protobuf:"varint,6,opt,name=dwTableCount" json:"dwTableCount,omitempty"` // 剩余牌堆剩余数量
	DwGetCount   *uint32  `protobuf:"varint,7,opt,name=dwGetCount" json:"dwGetCount,omitempty"`     //拿了几张牌
}

func (x *MSG_SC_BURRACO_UserGetCardResult) Reset() {
	*x = MSG_SC_BURRACO_UserGetCardResult{}
	if protoimpl.UnsafeEnabled {
		mi := &file_preson_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MSG_SC_BURRACO_UserGetCardResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MSG_SC_BURRACO_UserGetCardResult) ProtoMessage() {}

func (x *MSG_SC_BURRACO_UserGetCardResult) ProtoReflect() protoreflect.Message {
	mi := &file_preson_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MSG_SC_BURRACO_UserGetCardResult.ProtoReflect.Descriptor instead.
func (*MSG_SC_BURRACO_UserGetCardResult) Descriptor() ([]byte, []int) {
	return file_preson_proto_rawDescGZIP(), []int{10}
}

func (x *MSG_SC_BURRACO_UserGetCardResult) GetICode() uint32 {
	if x != nil && x.ICode != nil {
		return *x.ICode
	}
	return 0
}

func (x *MSG_SC_BURRACO_UserGetCardResult) GetDwChairID() uint32 {
	if x != nil && x.DwChairID != nil {
		return *x.DwChairID
	}
	return 0
}

func (x *MSG_SC_BURRACO_UserGetCardResult) GetDwUserID() uint32 {
	if x != nil && x.DwUserID != nil {
		return *x.DwUserID
	}
	return 0
}

func (x *MSG_SC_BURRACO_UserGetCardResult) GetDwGetType() uint32 {
	if x != nil && x.DwGetType != nil {
		return *x.DwGetType
	}
	return 0
}

func (x *MSG_SC_BURRACO_UserGetCardResult) GetDwCards() []uint32 {
	if x != nil {
		return x.DwCards
	}
	return nil
}

func (x *MSG_SC_BURRACO_UserGetCardResult) GetDwTableCount() uint32 {
	if x != nil && x.DwTableCount != nil {
		return *x.DwTableCount
	}
	return 0
}

func (x *MSG_SC_BURRACO_UserGetCardResult) GetDwGetCount() uint32 {
	if x != nil && x.DwGetCount != nil {
		return *x.DwGetCount
	}
	return 0
}

//玩家组牌接龙solitaire
type MSG_CS_BURRACO_UserSolitaire struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DwChairID        *uint32  `protobuf:"varint,1,req,name=dwChairID" json:"dwChairID,omitempty"`               // 操作玩家椅子ID
	DwSolitaireIndex *uint32  `protobuf:"varint,2,opt,name=dwSolitaireIndex" json:"dwSolitaireIndex,omitempty"` // 第几组接龙(起牌=当前有几组牌+1)
	DwSolitaireCards []uint32 `protobuf:"varint,3,rep,name=dwSolitaireCards" json:"dwSolitaireCards,omitempty"` // 接龙的牌的牌值
}

func (x *MSG_CS_BURRACO_UserSolitaire) Reset() {
	*x = MSG_CS_BURRACO_UserSolitaire{}
	if protoimpl.UnsafeEnabled {
		mi := &file_preson_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MSG_CS_BURRACO_UserSolitaire) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MSG_CS_BURRACO_UserSolitaire) ProtoMessage() {}

func (x *MSG_CS_BURRACO_UserSolitaire) ProtoReflect() protoreflect.Message {
	mi := &file_preson_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MSG_CS_BURRACO_UserSolitaire.ProtoReflect.Descriptor instead.
func (*MSG_CS_BURRACO_UserSolitaire) Descriptor() ([]byte, []int) {
	return file_preson_proto_rawDescGZIP(), []int{11}
}

func (x *MSG_CS_BURRACO_UserSolitaire) GetDwChairID() uint32 {
	if x != nil && x.DwChairID != nil {
		return *x.DwChairID
	}
	return 0
}

func (x *MSG_CS_BURRACO_UserSolitaire) GetDwSolitaireIndex() uint32 {
	if x != nil && x.DwSolitaireIndex != nil {
		return *x.DwSolitaireIndex
	}
	return 0
}

func (x *MSG_CS_BURRACO_UserSolitaire) GetDwSolitaireCards() []uint32 {
	if x != nil {
		return x.DwSolitaireCards
	}
	return nil
}

//iCode [1:不能操作  2:当前操作者不是你  3:操作状态不对 4:组牌参数不合法 5:手上无此牌 ]
//[ 11:表示不能 组成同牌值 或者 组成顺子  ]
//[ 12:最后一轮 手牌全部打完 ]
//[ 13: 没有 7 张以上的组合 不可以结束]
//[ 14:第二轮最后一张牌不可以是 鬼牌 ]
//[ 15: 系统错误]
//玩家组牌接龙solitaire结果
type MSG_SC_BURRACO_UserSolitaireResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ICode              *uint32  `protobuf:"varint,1,req,name=iCode" json:"iCode,omitempty"`                           // 玩家接龙错误码[0:可以接龙 1:不能接龙]
	DwChairID          *uint32  `protobuf:"varint,2,req,name=dwChairID" json:"dwChairID,omitempty"`                   //操作玩家椅子ID
	DwUserID           *uint32  `protobuf:"varint,3,opt,name=dwUserID" json:"dwUserID,omitempty"`                     //操作的玩家ID
	DwSolitaireIndex   *uint32  `protobuf:"varint,4,opt,name=dwSolitaireIndex" json:"dwSolitaireIndex,omitempty"`     // 第几组接龙(起牌=当前有几组牌+1)
	DwSolitaireCards   []uint32 `protobuf:"varint,5,rep,name=dwSolitaireCards" json:"dwSolitaireCards,omitempty"`     // 接龙的牌的牌值
	DwHandResidueCount *uint32  `protobuf:"varint,6,opt,name=dwHandResidueCount" json:"dwHandResidueCount,omitempty"` // 接龙之后 手上还有多少张牌
	DwOwnGorpScore     *uint32  `protobuf:"varint,7,opt,name=dwOwnGorpScore" json:"dwOwnGorpScore,omitempty"`         // 当前操作者所属队伍的得分
	DwHandCards        []uint32 `protobuf:"varint,8,rep,name=dwHandCards" json:"dwHandCards,omitempty"`               // 接龙之后 手上的牌[当前操作的玩家才有此数据]
}

func (x *MSG_SC_BURRACO_UserSolitaireResult) Reset() {
	*x = MSG_SC_BURRACO_UserSolitaireResult{}
	if protoimpl.UnsafeEnabled {
		mi := &file_preson_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MSG_SC_BURRACO_UserSolitaireResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MSG_SC_BURRACO_UserSolitaireResult) ProtoMessage() {}

func (x *MSG_SC_BURRACO_UserSolitaireResult) ProtoReflect() protoreflect.Message {
	mi := &file_preson_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MSG_SC_BURRACO_UserSolitaireResult.ProtoReflect.Descriptor instead.
func (*MSG_SC_BURRACO_UserSolitaireResult) Descriptor() ([]byte, []int) {
	return file_preson_proto_rawDescGZIP(), []int{12}
}

func (x *MSG_SC_BURRACO_UserSolitaireResult) GetICode() uint32 {
	if x != nil && x.ICode != nil {
		return *x.ICode
	}
	return 0
}

func (x *MSG_SC_BURRACO_UserSolitaireResult) GetDwChairID() uint32 {
	if x != nil && x.DwChairID != nil {
		return *x.DwChairID
	}
	return 0
}

func (x *MSG_SC_BURRACO_UserSolitaireResult) GetDwUserID() uint32 {
	if x != nil && x.DwUserID != nil {
		return *x.DwUserID
	}
	return 0
}

func (x *MSG_SC_BURRACO_UserSolitaireResult) GetDwSolitaireIndex() uint32 {
	if x != nil && x.DwSolitaireIndex != nil {
		return *x.DwSolitaireIndex
	}
	return 0
}

func (x *MSG_SC_BURRACO_UserSolitaireResult) GetDwSolitaireCards() []uint32 {
	if x != nil {
		return x.DwSolitaireCards
	}
	return nil
}

func (x *MSG_SC_BURRACO_UserSolitaireResult) GetDwHandResidueCount() uint32 {
	if x != nil && x.DwHandResidueCount != nil {
		return *x.DwHandResidueCount
	}
	return 0
}

func (x *MSG_SC_BURRACO_UserSolitaireResult) GetDwOwnGorpScore() uint32 {
	if x != nil && x.DwOwnGorpScore != nil {
		return *x.DwOwnGorpScore
	}
	return 0
}

func (x *MSG_SC_BURRACO_UserSolitaireResult) GetDwHandCards() []uint32 {
	if x != nil {
		return x.DwHandCards
	}
	return nil
}

//玩家弃牌
type MSG_CS_BURRACO_UserDiscard struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DwChairID     *uint32 `protobuf:"varint,1,req,name=dwChairID" json:"dwChairID,omitempty"`         // 操作玩家椅子ID
	DwDiscardCard *uint32 `protobuf:"varint,2,opt,name=dwDiscardCard" json:"dwDiscardCard,omitempty"` // 弃牌的牌值
}

func (x *MSG_CS_BURRACO_UserDiscard) Reset() {
	*x = MSG_CS_BURRACO_UserDiscard{}
	if protoimpl.UnsafeEnabled {
		mi := &file_preson_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MSG_CS_BURRACO_UserDiscard) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MSG_CS_BURRACO_UserDiscard) ProtoMessage() {}

func (x *MSG_CS_BURRACO_UserDiscard) ProtoReflect() protoreflect.Message {
	mi := &file_preson_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MSG_CS_BURRACO_UserDiscard.ProtoReflect.Descriptor instead.
func (*MSG_CS_BURRACO_UserDiscard) Descriptor() ([]byte, []int) {
	return file_preson_proto_rawDescGZIP(), []int{13}
}

func (x *MSG_CS_BURRACO_UserDiscard) GetDwChairID() uint32 {
	if x != nil && x.DwChairID != nil {
		return *x.DwChairID
	}
	return 0
}

func (x *MSG_CS_BURRACO_UserDiscard) GetDwDiscardCard() uint32 {
	if x != nil && x.DwDiscardCard != nil {
		return *x.DwDiscardCard
	}
	return 0
}

//玩家弃牌结果
type MSG_SC_BURRACO_UserDiscardResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ICode         *uint32 `protobuf:"varint,1,req,name=iCode" json:"iCode,omitempty"`                 // 玩家弃牌错误码[0:可以接龙 1:不能接龙]
	DwUserID      *uint32 `protobuf:"varint,2,opt,name=dwUserID" json:"dwUserID,omitempty"`           // 操作的玩家ID
	DwChairID     *uint32 `protobuf:"varint,3,opt,name=dwChairID" json:"dwChairID,omitempty"`         // 操作玩家椅子ID
	DwDiscardCard *uint32 `protobuf:"varint,4,opt,name=dwDiscardCard" json:"dwDiscardCard,omitempty"` // 弃牌的牌值
}

func (x *MSG_SC_BURRACO_UserDiscardResult) Reset() {
	*x = MSG_SC_BURRACO_UserDiscardResult{}
	if protoimpl.UnsafeEnabled {
		mi := &file_preson_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MSG_SC_BURRACO_UserDiscardResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MSG_SC_BURRACO_UserDiscardResult) ProtoMessage() {}

func (x *MSG_SC_BURRACO_UserDiscardResult) ProtoReflect() protoreflect.Message {
	mi := &file_preson_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MSG_SC_BURRACO_UserDiscardResult.ProtoReflect.Descriptor instead.
func (*MSG_SC_BURRACO_UserDiscardResult) Descriptor() ([]byte, []int) {
	return file_preson_proto_rawDescGZIP(), []int{14}
}

func (x *MSG_SC_BURRACO_UserDiscardResult) GetICode() uint32 {
	if x != nil && x.ICode != nil {
		return *x.ICode
	}
	return 0
}

func (x *MSG_SC_BURRACO_UserDiscardResult) GetDwUserID() uint32 {
	if x != nil && x.DwUserID != nil {
		return *x.DwUserID
	}
	return 0
}

func (x *MSG_SC_BURRACO_UserDiscardResult) GetDwChairID() uint32 {
	if x != nil && x.DwChairID != nil {
		return *x.DwChairID
	}
	return 0
}

func (x *MSG_SC_BURRACO_UserDiscardResult) GetDwDiscardCard() uint32 {
	if x != nil && x.DwDiscardCard != nil {
		return *x.DwDiscardCard
	}
	return 0
}

//玩家打完第一轮,发送交叉牌堆的牌
type MSG_SC_BURRACO_SendUserPOTCards struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DwChairID       *uint32  `protobuf:"varint,1,req,name=dwChairID" json:"dwChairID,omitempty"`             // 接收牌玩家椅子ID
	DwUserID        *uint32  `protobuf:"varint,2,opt,name=dwUserID" json:"dwUserID,omitempty"`               // 接收牌的玩家ID
	DwHandCardCount *uint32  `protobuf:"varint,3,opt,name=dwHandCardCount" json:"dwHandCardCount,omitempty"` // 此玩家手牌数量
	DwCards         []uint32 `protobuf:"varint,4,rep,name=dwCards" json:"dwCards,omitempty"`                 // 交叉牌堆的牌[对应的玩家才有这数据]
}

func (x *MSG_SC_BURRACO_SendUserPOTCards) Reset() {
	*x = MSG_SC_BURRACO_SendUserPOTCards{}
	if protoimpl.UnsafeEnabled {
		mi := &file_preson_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MSG_SC_BURRACO_SendUserPOTCards) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MSG_SC_BURRACO_SendUserPOTCards) ProtoMessage() {}

func (x *MSG_SC_BURRACO_SendUserPOTCards) ProtoReflect() protoreflect.Message {
	mi := &file_preson_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MSG_SC_BURRACO_SendUserPOTCards.ProtoReflect.Descriptor instead.
func (*MSG_SC_BURRACO_SendUserPOTCards) Descriptor() ([]byte, []int) {
	return file_preson_proto_rawDescGZIP(), []int{15}
}

func (x *MSG_SC_BURRACO_SendUserPOTCards) GetDwChairID() uint32 {
	if x != nil && x.DwChairID != nil {
		return *x.DwChairID
	}
	return 0
}

func (x *MSG_SC_BURRACO_SendUserPOTCards) GetDwUserID() uint32 {
	if x != nil && x.DwUserID != nil {
		return *x.DwUserID
	}
	return 0
}

func (x *MSG_SC_BURRACO_SendUserPOTCards) GetDwHandCardCount() uint32 {
	if x != nil && x.DwHandCardCount != nil {
		return *x.DwHandCardCount
	}
	return 0
}

func (x *MSG_SC_BURRACO_SendUserPOTCards) GetDwCards() []uint32 {
	if x != nil {
		return x.DwCards
	}
	return nil
}

// 玩家结算
type MSG_CS_BURRACO_UserGameEnd struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DwChairID *uint32 `protobuf:"varint,1,req,name=dwChairID" json:"dwChairID,omitempty"` // 服务器不解析
}

func (x *MSG_CS_BURRACO_UserGameEnd) Reset() {
	*x = MSG_CS_BURRACO_UserGameEnd{}
	if protoimpl.UnsafeEnabled {
		mi := &file_preson_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MSG_CS_BURRACO_UserGameEnd) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MSG_CS_BURRACO_UserGameEnd) ProtoMessage() {}

func (x *MSG_CS_BURRACO_UserGameEnd) ProtoReflect() protoreflect.Message {
	mi := &file_preson_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MSG_CS_BURRACO_UserGameEnd.ProtoReflect.Descriptor instead.
func (*MSG_CS_BURRACO_UserGameEnd) Descriptor() ([]byte, []int) {
	return file_preson_proto_rawDescGZIP(), []int{16}
}

func (x *MSG_CS_BURRACO_UserGameEnd) GetDwChairID() uint32 {
	if x != nil && x.DwChairID != nil {
		return *x.DwChairID
	}
	return 0
}

// 机器人退出 主动结算
type MSG_CS_BURRACO_RobotGameEnd struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DwChairID *uint32 `protobuf:"varint,1,req,name=dwChairID" json:"dwChairID,omitempty"` // 服务器不解析
}

func (x *MSG_CS_BURRACO_RobotGameEnd) Reset() {
	*x = MSG_CS_BURRACO_RobotGameEnd{}
	if protoimpl.UnsafeEnabled {
		mi := &file_preson_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MSG_CS_BURRACO_RobotGameEnd) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MSG_CS_BURRACO_RobotGameEnd) ProtoMessage() {}

func (x *MSG_CS_BURRACO_RobotGameEnd) ProtoReflect() protoreflect.Message {
	mi := &file_preson_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MSG_CS_BURRACO_RobotGameEnd.ProtoReflect.Descriptor instead.
func (*MSG_CS_BURRACO_RobotGameEnd) Descriptor() ([]byte, []int) {
	return file_preson_proto_rawDescGZIP(), []int{17}
}

func (x *MSG_CS_BURRACO_RobotGameEnd) GetDwChairID() uint32 {
	if x != nil && x.DwChairID != nil {
		return *x.DwChairID
	}
	return 0
}

//机器人退出 主动结算 返回
type MSG_SC_BURRACO_RobotGameResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DwWinnerGroupID       *uint32                      `protobuf:"varint,1,req,name=dwWinnerGroupID" json:"dwWinnerGroupID,omitempty"`            //赢家队伍ID  1或者2
	DwWinnerChairID       []uint32                     `protobuf:"varint,2,rep,name=dwWinnerChairID" json:"dwWinnerChairID,omitempty"`            //赢家椅子ID
	TabUserSettleInfoList []*MSG_BURRACOUserSettleInfo `protobuf:"bytes,3,rep,name=tabUserSettleInfoList" json:"tabUserSettleInfoList,omitempty"` //玩家列表
}

func (x *MSG_SC_BURRACO_RobotGameResult) Reset() {
	*x = MSG_SC_BURRACO_RobotGameResult{}
	if protoimpl.UnsafeEnabled {
		mi := &file_preson_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MSG_SC_BURRACO_RobotGameResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MSG_SC_BURRACO_RobotGameResult) ProtoMessage() {}

func (x *MSG_SC_BURRACO_RobotGameResult) ProtoReflect() protoreflect.Message {
	mi := &file_preson_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MSG_SC_BURRACO_RobotGameResult.ProtoReflect.Descriptor instead.
func (*MSG_SC_BURRACO_RobotGameResult) Descriptor() ([]byte, []int) {
	return file_preson_proto_rawDescGZIP(), []int{18}
}

func (x *MSG_SC_BURRACO_RobotGameResult) GetDwWinnerGroupID() uint32 {
	if x != nil && x.DwWinnerGroupID != nil {
		return *x.DwWinnerGroupID
	}
	return 0
}

func (x *MSG_SC_BURRACO_RobotGameResult) GetDwWinnerChairID() []uint32 {
	if x != nil {
		return x.DwWinnerChairID
	}
	return nil
}

func (x *MSG_SC_BURRACO_RobotGameResult) GetTabUserSettleInfoList() []*MSG_BURRACOUserSettleInfo {
	if x != nil {
		return x.TabUserSettleInfoList
	}
	return nil
}

var File_preson_proto protoreflect.FileDescriptor

var file_preson_proto_rawDesc = []byte{
	0x0a, 0x0c, 0x70, 0x72, 0x65, 0x73, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x02,
	0x70, 0x62, 0x22, 0x46, 0x0a, 0x1c, 0x4d, 0x53, 0x47, 0x5f, 0x53, 0x43, 0x5f, 0x42, 0x55, 0x52,
	0x52, 0x41, 0x43, 0x4f, 0x5f, 0x47, 0x61, 0x6d, 0x65, 0x53, 0x74, 0x61, 0x72, 0x74, 0x44, 0x61,
	0x74, 0x61, 0x12, 0x11, 0x0a, 0x09, 0x64, 0x77, 0x43, 0x61, 0x72, 0x64, 0x4e, 0x75, 0x6d, 0x18,
	0x01, 0x20, 0x02, 0x28, 0x0d, 0x12, 0x13, 0x0a, 0x0b, 0x64, 0x77, 0x42, 0x61, 0x73, 0x65, 0x53,
	0x63, 0x6f, 0x72, 0x65, 0x18, 0x02, 0x20, 0x02, 0x28, 0x0d, 0x22, 0x3f, 0x0a, 0x0d, 0x47, 0x72,
	0x6f, 0x75, 0x70, 0x43, 0x61, 0x72, 0x64, 0x44, 0x61, 0x74, 0x61, 0x12, 0x14, 0x0a, 0x0c, 0x64,
	0x77, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x01, 0x20, 0x02, 0x28,
	0x0d, 0x12, 0x18, 0x0a, 0x10, 0x64, 0x77, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x6e, 0x64, 0x65,
	0x78, 0x44, 0x61, 0x74, 0x61, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0d, 0x22, 0x96, 0x02, 0x0a, 0x0c,
	0x4d, 0x53, 0x47, 0x5f, 0x44, 0x65, 0x73, 0x6b, 0x44, 0x61, 0x74, 0x61, 0x12, 0x19, 0x0a, 0x11,
	0x64, 0x77, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x61, 0x72, 0x64, 0x73, 0x43, 0x6f, 0x75, 0x6e,
	0x74, 0x18, 0x01, 0x20, 0x02, 0x28, 0x0d, 0x12, 0x1a, 0x0a, 0x12, 0x74, 0x61, 0x62, 0x44, 0x69,
	0x73, 0x63, 0x61, 0x72, 0x64, 0x44, 0x61, 0x74, 0x61, 0x4c, 0x69, 0x73, 0x74, 0x18, 0x02, 0x20,
	0x03, 0x28, 0x0d, 0x12, 0x30, 0x0a, 0x15, 0x74, 0x61, 0x62, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x43,
	0x61, 0x72, 0x64, 0x44, 0x61, 0x74, 0x61, 0x4c, 0x69, 0x73, 0x74, 0x31, 0x18, 0x03, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x11, 0x2e, 0x70, 0x62, 0x2e, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x43, 0x61, 0x72,
	0x64, 0x44, 0x61, 0x74, 0x61, 0x12, 0x30, 0x0a, 0x15, 0x74, 0x61, 0x62, 0x47, 0x72, 0x6f, 0x75,
	0x70, 0x43, 0x61, 0x72, 0x64, 0x44, 0x61, 0x74, 0x61, 0x4c, 0x69, 0x73, 0x74, 0x32, 0x18, 0x04,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x70, 0x62, 0x2e, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x43,
	0x61, 0x72, 0x64, 0x44, 0x61, 0x74, 0x61, 0x12, 0x10, 0x0a, 0x08, 0x64, 0x77, 0x53, 0x63, 0x6f,
	0x72, 0x65, 0x31, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x12, 0x10, 0x0a, 0x08, 0x64, 0x77, 0x53,
	0x63, 0x6f, 0x72, 0x65, 0x32, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0d, 0x12, 0x13, 0x0a, 0x0b, 0x64,
	0x77, 0x50, 0x4f, 0x54, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x31, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0d,
	0x12, 0x13, 0x0a, 0x0b, 0x64, 0x77, 0x50, 0x4f, 0x54, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x32, 0x18,
	0x08, 0x20, 0x01, 0x28, 0x0d, 0x12, 0x1d, 0x0a, 0x15, 0x74, 0x61, 0x62, 0x4c, 0x61, 0x73, 0x74,
	0x47, 0x65, 0x74, 0x44, 0x69, 0x73, 0x63, 0x61, 0x72, 0x64, 0x4c, 0x69, 0x73, 0x74, 0x18, 0x09,
	0x20, 0x03, 0x28, 0x0d, 0x22, 0x41, 0x0a, 0x15, 0x4d, 0x53, 0x47, 0x5f, 0x50, 0x6c, 0x61, 0x79,
	0x65, 0x72, 0x47, 0x61, 0x6d, 0x65, 0x69, 0x6e, 0x67, 0x44, 0x61, 0x74, 0x61, 0x12, 0x18, 0x0a,
	0x10, 0x74, 0x61, 0x62, 0x48, 0x61, 0x6e, 0x64, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x44, 0x61, 0x74,
	0x61, 0x18, 0x01, 0x20, 0x02, 0x28, 0x0d, 0x12, 0x0e, 0x0a, 0x06, 0x64, 0x77, 0x54, 0x65, 0x61,
	0x6d, 0x18, 0x02, 0x20, 0x02, 0x28, 0x0d, 0x22, 0xaa, 0x01, 0x0a, 0x1b, 0x4d, 0x53, 0x47, 0x5f,
	0x53, 0x43, 0x5f, 0x42, 0x55, 0x52, 0x52, 0x41, 0x43, 0x4f, 0x5f, 0x53, 0x65, 0x6e, 0x64, 0x48,
	0x61, 0x6e, 0x64, 0x43, 0x61, 0x72, 0x64, 0x12, 0x22, 0x0a, 0x08, 0x44, 0x65, 0x73, 0x6b, 0x49,
	0x6e, 0x66, 0x6f, 0x18, 0x01, 0x20, 0x02, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x70, 0x62, 0x2e, 0x4d,
	0x53, 0x47, 0x5f, 0x44, 0x65, 0x73, 0x6b, 0x44, 0x61, 0x74, 0x61, 0x12, 0x2d, 0x0a, 0x0a, 0x50,
	0x6c, 0x61, 0x79, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x19, 0x2e, 0x70, 0x62, 0x2e, 0x4d, 0x53, 0x47, 0x5f, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x47,
	0x61, 0x6d, 0x65, 0x69, 0x6e, 0x67, 0x44, 0x61, 0x74, 0x61, 0x12, 0x11, 0x0a, 0x09, 0x64, 0x77,
	0x43, 0x68, 0x61, 0x69, 0x72, 0x49, 0x44, 0x18, 0x03, 0x20, 0x02, 0x28, 0x0d, 0x12, 0x11, 0x0a,
	0x09, 0x64, 0x77, 0x43, 0x61, 0x72, 0x64, 0x4e, 0x75, 0x6d, 0x18, 0x04, 0x20, 0x02, 0x28, 0x0d,
	0x12, 0x12, 0x0a, 0x0a, 0x64, 0x77, 0x43, 0x61, 0x72, 0x64, 0x44, 0x61, 0x74, 0x61, 0x18, 0x05,
	0x20, 0x03, 0x28, 0x0d, 0x22, 0xd3, 0x01, 0x0a, 0x19, 0x4d, 0x53, 0x47, 0x5f, 0x42, 0x55, 0x52,
	0x52, 0x41, 0x43, 0x4f, 0x55, 0x73, 0x65, 0x72, 0x53, 0x65, 0x74, 0x74, 0x6c, 0x65, 0x49, 0x6e,
	0x66, 0x6f, 0x12, 0x11, 0x0a, 0x09, 0x64, 0x77, 0x43, 0x68, 0x61, 0x69, 0x72, 0x49, 0x44, 0x18,
	0x01, 0x20, 0x02, 0x28, 0x0d, 0x12, 0x0e, 0x0a, 0x06, 0x64, 0x77, 0x47, 0x6f, 0x6c, 0x64, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x05, 0x12, 0x14, 0x0a, 0x0c, 0x64, 0x77, 0x54, 0x6f, 0x74, 0x61, 0x6c,
	0x53, 0x63, 0x6f, 0x72, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x12, 0x16, 0x0a, 0x0e, 0x64,
	0x77, 0x43, 0x6c, 0x65, 0x61, 0x6e, 0x42, 0x75, 0x72, 0x72, 0x61, 0x63, 0x6f, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x05, 0x12, 0x16, 0x0a, 0x0e, 0x64, 0x77, 0x44, 0x69, 0x72, 0x74, 0x79, 0x42, 0x75,
	0x72, 0x72, 0x61, 0x63, 0x6f, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x12, 0x14, 0x0a, 0x0c, 0x64,
	0x77, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x05, 0x12, 0x15, 0x0a, 0x0d, 0x64, 0x77, 0x43, 0x61, 0x72, 0x64, 0x73, 0x49, 0x6e, 0x48, 0x61,
	0x6e, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x05, 0x12, 0x0d, 0x0a, 0x05, 0x64, 0x77, 0x50, 0x4f,
	0x54, 0x18, 0x08, 0x20, 0x01, 0x28, 0x05, 0x12, 0x11, 0x0a, 0x09, 0x64, 0x77, 0x43, 0x6c, 0x6f,
	0x73, 0x69, 0x6e, 0x67, 0x18, 0x09, 0x20, 0x01, 0x28, 0x05, 0x22, 0x8b, 0x01, 0x0a, 0x19, 0x4d,
	0x53, 0x47, 0x5f, 0x53, 0x43, 0x5f, 0x42, 0x55, 0x52, 0x52, 0x41, 0x43, 0x4f, 0x5f, 0x47, 0x61,
	0x6d, 0x65, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x17, 0x0a, 0x0f, 0x64, 0x77, 0x57, 0x69,
	0x6e, 0x6e, 0x65, 0x72, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x44, 0x18, 0x01, 0x20, 0x02, 0x28,
	0x0d, 0x12, 0x17, 0x0a, 0x0f, 0x64, 0x77, 0x57, 0x69, 0x6e, 0x6e, 0x65, 0x72, 0x43, 0x68, 0x61,
	0x69, 0x72, 0x49, 0x44, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0d, 0x12, 0x3c, 0x0a, 0x15, 0x74, 0x61,
	0x62, 0x55, 0x73, 0x65, 0x72, 0x53, 0x65, 0x74, 0x74, 0x6c, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x4c,
	0x69, 0x73, 0x74, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x70, 0x62, 0x2e, 0x4d,
	0x53, 0x47, 0x5f, 0x42, 0x55, 0x52, 0x52, 0x41, 0x43, 0x4f, 0x55, 0x73, 0x65, 0x72, 0x53, 0x65,
	0x74, 0x74, 0x6c, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x22, 0xd5, 0x01, 0x0a, 0x17, 0x4d, 0x53, 0x47,
	0x5f, 0x53, 0x43, 0x5f, 0x42, 0x55, 0x52, 0x52, 0x41, 0x43, 0x4f, 0x5f, 0x47, 0x61, 0x6d, 0x65,
	0x50, 0x6c, 0x61, 0x79, 0x12, 0x13, 0x0a, 0x0b, 0x64, 0x77, 0x42, 0x61, 0x73, 0x65, 0x53, 0x63,
	0x6f, 0x72, 0x65, 0x18, 0x01, 0x20, 0x02, 0x28, 0x0d, 0x12, 0x18, 0x0a, 0x10, 0x64, 0x77, 0x43,
	0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x43, 0x68, 0x61, 0x69, 0x72, 0x49, 0x44, 0x18, 0x02, 0x20,
	0x02, 0x28, 0x0d, 0x12, 0x11, 0x0a, 0x09, 0x67, 0x61, 0x6d, 0x65, 0x53, 0x74, 0x61, 0x74, 0x65,
	0x18, 0x03, 0x20, 0x02, 0x28, 0x0d, 0x12, 0x11, 0x0a, 0x09, 0x64, 0x77, 0x4f, 0x70, 0x70, 0x54,
	0x69, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x02, 0x28, 0x0d, 0x12, 0x12, 0x0a, 0x0a, 0x64, 0x77, 0x48,
	0x61, 0x6e, 0x64, 0x43, 0x61, 0x72, 0x64, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0d, 0x12, 0x2d, 0x0a,
	0x0a, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x06, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x19, 0x2e, 0x70, 0x62, 0x2e, 0x4d, 0x53, 0x47, 0x5f, 0x50, 0x6c, 0x61, 0x79, 0x65,
	0x72, 0x47, 0x61, 0x6d, 0x65, 0x69, 0x6e, 0x67, 0x44, 0x61, 0x74, 0x61, 0x12, 0x22, 0x0a, 0x08,
	0x44, 0x65, 0x73, 0x6b, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x07, 0x20, 0x02, 0x28, 0x0b, 0x32, 0x10,
	0x2e, 0x70, 0x62, 0x2e, 0x4d, 0x53, 0x47, 0x5f, 0x44, 0x65, 0x73, 0x6b, 0x44, 0x61, 0x74, 0x61,
	0x22, 0x55, 0x0a, 0x1b, 0x4d, 0x53, 0x47, 0x5f, 0x53, 0x43, 0x5f, 0x42, 0x55, 0x52, 0x52, 0x41,
	0x43, 0x4f, 0x5f, 0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x55, 0x73, 0x65, 0x72, 0x4f, 0x50, 0x12,
	0x11, 0x0a, 0x09, 0x64, 0x77, 0x43, 0x68, 0x61, 0x69, 0x72, 0x49, 0x44, 0x18, 0x01, 0x20, 0x02,
	0x28, 0x0d, 0x12, 0x11, 0x0a, 0x09, 0x64, 0x77, 0x4f, 0x70, 0x70, 0x54, 0x69, 0x6d, 0x65, 0x18,
	0x02, 0x20, 0x02, 0x28, 0x0d, 0x12, 0x10, 0x0a, 0x08, 0x64, 0x77, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x22, 0x53, 0x0a, 0x1a, 0x4d, 0x53, 0x47, 0x5f, 0x43,
	0x53, 0x5f, 0x42, 0x55, 0x52, 0x52, 0x41, 0x43, 0x4f, 0x5f, 0x55, 0x73, 0x65, 0x72, 0x47, 0x65,
	0x74, 0x43, 0x61, 0x72, 0x64, 0x12, 0x11, 0x0a, 0x09, 0x64, 0x77, 0x43, 0x68, 0x61, 0x69, 0x72,
	0x49, 0x44, 0x18, 0x01, 0x20, 0x02, 0x28, 0x0d, 0x12, 0x11, 0x0a, 0x09, 0x64, 0x77, 0x47, 0x65,
	0x74, 0x54, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x02, 0x28, 0x0d, 0x12, 0x0f, 0x0a, 0x07, 0x64,
	0x77, 0x43, 0x61, 0x72, 0x64, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0d, 0x22, 0xa4, 0x01, 0x0a,
	0x20, 0x4d, 0x53, 0x47, 0x5f, 0x53, 0x43, 0x5f, 0x42, 0x55, 0x52, 0x52, 0x41, 0x43, 0x4f, 0x5f,
	0x55, 0x73, 0x65, 0x72, 0x47, 0x65, 0x74, 0x43, 0x61, 0x72, 0x64, 0x52, 0x65, 0x73, 0x75, 0x6c,
	0x74, 0x12, 0x0d, 0x0a, 0x05, 0x69, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x02, 0x28, 0x0d,
	0x12, 0x11, 0x0a, 0x09, 0x64, 0x77, 0x43, 0x68, 0x61, 0x69, 0x72, 0x49, 0x44, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0d, 0x12, 0x10, 0x0a, 0x08, 0x64, 0x77, 0x55, 0x73, 0x65, 0x72, 0x49, 0x44, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0d, 0x12, 0x11, 0x0a, 0x09, 0x64, 0x77, 0x47, 0x65, 0x74, 0x54, 0x79,
	0x70, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x12, 0x0f, 0x0a, 0x07, 0x64, 0x77, 0x43, 0x61,
	0x72, 0x64, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0d, 0x12, 0x14, 0x0a, 0x0c, 0x64, 0x77, 0x54,
	0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0d, 0x12,
	0x12, 0x0a, 0x0a, 0x64, 0x77, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x0d, 0x22, 0x65, 0x0a, 0x1c, 0x4d, 0x53, 0x47, 0x5f, 0x43, 0x53, 0x5f, 0x42, 0x55,
	0x52, 0x52, 0x41, 0x43, 0x4f, 0x5f, 0x55, 0x73, 0x65, 0x72, 0x53, 0x6f, 0x6c, 0x69, 0x74, 0x61,
	0x69, 0x72, 0x65, 0x12, 0x11, 0x0a, 0x09, 0x64, 0x77, 0x43, 0x68, 0x61, 0x69, 0x72, 0x49, 0x44,
	0x18, 0x01, 0x20, 0x02, 0x28, 0x0d, 0x12, 0x18, 0x0a, 0x10, 0x64, 0x77, 0x53, 0x6f, 0x6c, 0x69,
	0x74, 0x61, 0x69, 0x72, 0x65, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d,
	0x12, 0x18, 0x0a, 0x10, 0x64, 0x77, 0x53, 0x6f, 0x6c, 0x69, 0x74, 0x61, 0x69, 0x72, 0x65, 0x43,
	0x61, 0x72, 0x64, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0d, 0x22, 0xd5, 0x01, 0x0a, 0x22, 0x4d,
	0x53, 0x47, 0x5f, 0x53, 0x43, 0x5f, 0x42, 0x55, 0x52, 0x52, 0x41, 0x43, 0x4f, 0x5f, 0x55, 0x73,
	0x65, 0x72, 0x53, 0x6f, 0x6c, 0x69, 0x74, 0x61, 0x69, 0x72, 0x65, 0x52, 0x65, 0x73, 0x75, 0x6c,
	0x74, 0x12, 0x0d, 0x0a, 0x05, 0x69, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x02, 0x28, 0x0d,
	0x12, 0x11, 0x0a, 0x09, 0x64, 0x77, 0x43, 0x68, 0x61, 0x69, 0x72, 0x49, 0x44, 0x18, 0x02, 0x20,
	0x02, 0x28, 0x0d, 0x12, 0x10, 0x0a, 0x08, 0x64, 0x77, 0x55, 0x73, 0x65, 0x72, 0x49, 0x44, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0d, 0x12, 0x18, 0x0a, 0x10, 0x64, 0x77, 0x53, 0x6f, 0x6c, 0x69, 0x74,
	0x61, 0x69, 0x72, 0x65, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x12,
	0x18, 0x0a, 0x10, 0x64, 0x77, 0x53, 0x6f, 0x6c, 0x69, 0x74, 0x61, 0x69, 0x72, 0x65, 0x43, 0x61,
	0x72, 0x64, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0d, 0x12, 0x1a, 0x0a, 0x12, 0x64, 0x77, 0x48,
	0x61, 0x6e, 0x64, 0x52, 0x65, 0x73, 0x69, 0x64, 0x75, 0x65, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x0d, 0x12, 0x16, 0x0a, 0x0e, 0x64, 0x77, 0x4f, 0x77, 0x6e, 0x47, 0x6f,
	0x72, 0x70, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0d, 0x12, 0x13, 0x0a,
	0x0b, 0x64, 0x77, 0x48, 0x61, 0x6e, 0x64, 0x43, 0x61, 0x72, 0x64, 0x73, 0x18, 0x08, 0x20, 0x03,
	0x28, 0x0d, 0x22, 0x46, 0x0a, 0x1a, 0x4d, 0x53, 0x47, 0x5f, 0x43, 0x53, 0x5f, 0x42, 0x55, 0x52,
	0x52, 0x41, 0x43, 0x4f, 0x5f, 0x55, 0x73, 0x65, 0x72, 0x44, 0x69, 0x73, 0x63, 0x61, 0x72, 0x64,
	0x12, 0x11, 0x0a, 0x09, 0x64, 0x77, 0x43, 0x68, 0x61, 0x69, 0x72, 0x49, 0x44, 0x18, 0x01, 0x20,
	0x02, 0x28, 0x0d, 0x12, 0x15, 0x0a, 0x0d, 0x64, 0x77, 0x44, 0x69, 0x73, 0x63, 0x61, 0x72, 0x64,
	0x43, 0x61, 0x72, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x22, 0x6d, 0x0a, 0x20, 0x4d, 0x53,
	0x47, 0x5f, 0x53, 0x43, 0x5f, 0x42, 0x55, 0x52, 0x52, 0x41, 0x43, 0x4f, 0x5f, 0x55, 0x73, 0x65,
	0x72, 0x44, 0x69, 0x73, 0x63, 0x61, 0x72, 0x64, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x0d,
	0x0a, 0x05, 0x69, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x02, 0x28, 0x0d, 0x12, 0x10, 0x0a,
	0x08, 0x64, 0x77, 0x55, 0x73, 0x65, 0x72, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x12,
	0x11, 0x0a, 0x09, 0x64, 0x77, 0x43, 0x68, 0x61, 0x69, 0x72, 0x49, 0x44, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0d, 0x12, 0x15, 0x0a, 0x0d, 0x64, 0x77, 0x44, 0x69, 0x73, 0x63, 0x61, 0x72, 0x64, 0x43,
	0x61, 0x72, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x22, 0x70, 0x0a, 0x1f, 0x4d, 0x53, 0x47,
	0x5f, 0x53, 0x43, 0x5f, 0x42, 0x55, 0x52, 0x52, 0x41, 0x43, 0x4f, 0x5f, 0x53, 0x65, 0x6e, 0x64,
	0x55, 0x73, 0x65, 0x72, 0x50, 0x4f, 0x54, 0x43, 0x61, 0x72, 0x64, 0x73, 0x12, 0x11, 0x0a, 0x09,
	0x64, 0x77, 0x43, 0x68, 0x61, 0x69, 0x72, 0x49, 0x44, 0x18, 0x01, 0x20, 0x02, 0x28, 0x0d, 0x12,
	0x10, 0x0a, 0x08, 0x64, 0x77, 0x55, 0x73, 0x65, 0x72, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0d, 0x12, 0x17, 0x0a, 0x0f, 0x64, 0x77, 0x48, 0x61, 0x6e, 0x64, 0x43, 0x61, 0x72, 0x64, 0x43,
	0x6f, 0x75, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x12, 0x0f, 0x0a, 0x07, 0x64, 0x77,
	0x43, 0x61, 0x72, 0x64, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0d, 0x22, 0x2f, 0x0a, 0x1a, 0x4d,
	0x53, 0x47, 0x5f, 0x43, 0x53, 0x5f, 0x42, 0x55, 0x52, 0x52, 0x41, 0x43, 0x4f, 0x5f, 0x55, 0x73,
	0x65, 0x72, 0x47, 0x61, 0x6d, 0x65, 0x45, 0x6e, 0x64, 0x12, 0x11, 0x0a, 0x09, 0x64, 0x77, 0x43,
	0x68, 0x61, 0x69, 0x72, 0x49, 0x44, 0x18, 0x01, 0x20, 0x02, 0x28, 0x0d, 0x22, 0x30, 0x0a, 0x1b,
	0x4d, 0x53, 0x47, 0x5f, 0x43, 0x53, 0x5f, 0x42, 0x55, 0x52, 0x52, 0x41, 0x43, 0x4f, 0x5f, 0x52,
	0x6f, 0x62, 0x6f, 0x74, 0x47, 0x61, 0x6d, 0x65, 0x45, 0x6e, 0x64, 0x12, 0x11, 0x0a, 0x09, 0x64,
	0x77, 0x43, 0x68, 0x61, 0x69, 0x72, 0x49, 0x44, 0x18, 0x01, 0x20, 0x02, 0x28, 0x0d, 0x22, 0x90,
	0x01, 0x0a, 0x1e, 0x4d, 0x53, 0x47, 0x5f, 0x53, 0x43, 0x5f, 0x42, 0x55, 0x52, 0x52, 0x41, 0x43,
	0x4f, 0x5f, 0x52, 0x6f, 0x62, 0x6f, 0x74, 0x47, 0x61, 0x6d, 0x65, 0x52, 0x65, 0x73, 0x75, 0x6c,
	0x74, 0x12, 0x17, 0x0a, 0x0f, 0x64, 0x77, 0x57, 0x69, 0x6e, 0x6e, 0x65, 0x72, 0x47, 0x72, 0x6f,
	0x75, 0x70, 0x49, 0x44, 0x18, 0x01, 0x20, 0x02, 0x28, 0x0d, 0x12, 0x17, 0x0a, 0x0f, 0x64, 0x77,
	0x57, 0x69, 0x6e, 0x6e, 0x65, 0x72, 0x43, 0x68, 0x61, 0x69, 0x72, 0x49, 0x44, 0x18, 0x02, 0x20,
	0x03, 0x28, 0x0d, 0x12, 0x3c, 0x0a, 0x15, 0x74, 0x61, 0x62, 0x55, 0x73, 0x65, 0x72, 0x53, 0x65,
	0x74, 0x74, 0x6c, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x4c, 0x69, 0x73, 0x74, 0x18, 0x03, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x70, 0x62, 0x2e, 0x4d, 0x53, 0x47, 0x5f, 0x42, 0x55, 0x52, 0x52,
	0x41, 0x43, 0x4f, 0x55, 0x73, 0x65, 0x72, 0x53, 0x65, 0x74, 0x74, 0x6c, 0x65, 0x49, 0x6e, 0x66,
	0x6f, 0x2a, 0x2b, 0x0a, 0x0e, 0x4c, 0x4f, 0x47, 0x49, 0x43, 0x5f, 0x4d, 0x41, 0x49, 0x4e, 0x5f,
	0x4d, 0x53, 0x47, 0x12, 0x19, 0x0a, 0x15, 0x4d, 0x53, 0x47, 0x5f, 0x47, 0x41, 0x4d, 0x45, 0x4c,
	0x4f, 0x47, 0x49, 0x43, 0x5f, 0x4d, 0x41, 0x49, 0x4e, 0x5f, 0x49, 0x44, 0x10, 0x00, 0x2a, 0xd6,
	0x03, 0x0a, 0x19, 0x4d, 0x45, 0x53, 0x53, 0x41, 0x47, 0x45, 0x5f, 0x53, 0x43, 0x5f, 0x42, 0x55,
	0x52, 0x52, 0x41, 0x43, 0x4f, 0x5f, 0x53, 0x55, 0x42, 0x5f, 0x49, 0x44, 0x12, 0x25, 0x0a, 0x20,
	0x4d, 0x53, 0x47, 0x49, 0x44, 0x5f, 0x53, 0x43, 0x5f, 0x42, 0x55, 0x52, 0x52, 0x41, 0x43, 0x4f,
	0x5f, 0x47, 0x41, 0x4d, 0x45, 0x5f, 0x53, 0x54, 0x41, 0x52, 0x54, 0x5f, 0x44, 0x41, 0x54, 0x41,
	0x10, 0xe8, 0x07, 0x12, 0x24, 0x0a, 0x1f, 0x4d, 0x53, 0x47, 0x49, 0x44, 0x5f, 0x53, 0x43, 0x5f,
	0x42, 0x55, 0x52, 0x52, 0x41, 0x43, 0x4f, 0x5f, 0x53, 0x45, 0x4e, 0x44, 0x5f, 0x48, 0x41, 0x4e,
	0x44, 0x5f, 0x43, 0x41, 0x52, 0x44, 0x10, 0xe9, 0x07, 0x12, 0x23, 0x0a, 0x1e, 0x4d, 0x53, 0x47,
	0x49, 0x44, 0x5f, 0x53, 0x43, 0x5f, 0x42, 0x55, 0x52, 0x52, 0x41, 0x43, 0x4f, 0x5f, 0x49, 0x4e,
	0x46, 0x4f, 0x52, 0x4d, 0x5f, 0x55, 0x53, 0x45, 0x52, 0x4f, 0x50, 0x10, 0xeb, 0x07, 0x12, 0x21,
	0x0a, 0x1c, 0x4d, 0x53, 0x47, 0x49, 0x44, 0x5f, 0x53, 0x43, 0x5f, 0x42, 0x55, 0x52, 0x52, 0x41,
	0x43, 0x4f, 0x5f, 0x47, 0x41, 0x4d, 0x45, 0x5f, 0x52, 0x45, 0x53, 0x55, 0x4c, 0x54, 0x10, 0xed,
	0x07, 0x12, 0x25, 0x0a, 0x20, 0x4d, 0x53, 0x47, 0x49, 0x44, 0x5f, 0x53, 0x43, 0x5f, 0x42, 0x55,
	0x52, 0x52, 0x41, 0x43, 0x4f, 0x5f, 0x47, 0x41, 0x4d, 0x45, 0x53, 0x43, 0x45, 0x4e, 0x43, 0x45,
	0x5f, 0x50, 0x4c, 0x41, 0x59, 0x10, 0xee, 0x07, 0x12, 0x25, 0x0a, 0x20, 0x4d, 0x53, 0x47, 0x49,
	0x44, 0x5f, 0x53, 0x43, 0x5f, 0x42, 0x55, 0x52, 0x52, 0x41, 0x43, 0x4f, 0x5f, 0x47, 0x41, 0x4d,
	0x45, 0x53, 0x43, 0x45, 0x4e, 0x43, 0x45, 0x5f, 0x46, 0x52, 0x45, 0x45, 0x10, 0xef, 0x07, 0x12,
	0x27, 0x0a, 0x22, 0x4d, 0x53, 0x47, 0x49, 0x44, 0x5f, 0x53, 0x43, 0x5f, 0x42, 0x55, 0x52, 0x52,
	0x41, 0x43, 0x4f, 0x5f, 0x52, 0x4f, 0x42, 0x4f, 0x54, 0x5f, 0x47, 0x41, 0x4d, 0x45, 0x5f, 0x52,
	0x45, 0x53, 0x55, 0x4c, 0x54, 0x10, 0xf0, 0x07, 0x12, 0x2a, 0x0a, 0x25, 0x4d, 0x53, 0x47, 0x49,
	0x44, 0x5f, 0x53, 0x43, 0x5f, 0x42, 0x55, 0x52, 0x52, 0x41, 0x43, 0x4f, 0x5f, 0x55, 0x53, 0x45,
	0x52, 0x5f, 0x47, 0x45, 0x54, 0x5f, 0x43, 0x41, 0x52, 0x44, 0x5f, 0x52, 0x45, 0x53, 0x55, 0x4c,
	0x54, 0x10, 0xf3, 0x07, 0x12, 0x2b, 0x0a, 0x26, 0x4d, 0x53, 0x47, 0x49, 0x44, 0x5f, 0x53, 0x43,
	0x5f, 0x42, 0x55, 0x52, 0x52, 0x41, 0x43, 0x4f, 0x5f, 0x55, 0x53, 0x45, 0x52, 0x5f, 0x53, 0x4f,
	0x4c, 0x49, 0x54, 0x41, 0x49, 0x52, 0x45, 0x5f, 0x52, 0x45, 0x53, 0x55, 0x4c, 0x54, 0x10, 0xf4,
	0x07, 0x12, 0x29, 0x0a, 0x24, 0x4d, 0x53, 0x47, 0x49, 0x44, 0x5f, 0x53, 0x43, 0x5f, 0x42, 0x55,
	0x52, 0x52, 0x41, 0x43, 0x4f, 0x5f, 0x55, 0x53, 0x45, 0x52, 0x5f, 0x44, 0x49, 0x53, 0x43, 0x41,
	0x52, 0x44, 0x5f, 0x52, 0x45, 0x53, 0x55, 0x4c, 0x54, 0x10, 0xf5, 0x07, 0x12, 0x29, 0x0a, 0x24,
	0x4d, 0x53, 0x47, 0x49, 0x44, 0x5f, 0x53, 0x43, 0x5f, 0x42, 0x55, 0x52, 0x52, 0x41, 0x43, 0x4f,
	0x5f, 0x53, 0x45, 0x4e, 0x44, 0x5f, 0x55, 0x53, 0x45, 0x52, 0x5f, 0x50, 0x4f, 0x54, 0x5f, 0x43,
	0x41, 0x52, 0x44, 0x53, 0x10, 0xf6, 0x07, 0x2a, 0xd5, 0x01, 0x0a, 0x19, 0x4d, 0x45, 0x53, 0x53,
	0x41, 0x47, 0x45, 0x5f, 0x43, 0x53, 0x5f, 0x42, 0x55, 0x52, 0x52, 0x41, 0x43, 0x4f, 0x5f, 0x53,
	0x55, 0x42, 0x5f, 0x49, 0x44, 0x12, 0x23, 0x0a, 0x1e, 0x4d, 0x53, 0x47, 0x49, 0x44, 0x5f, 0x43,
	0x53, 0x5f, 0x42, 0x55, 0x52, 0x52, 0x41, 0x43, 0x4f, 0x5f, 0x55, 0x53, 0x45, 0x52, 0x5f, 0x47,
	0x45, 0x54, 0x5f, 0x43, 0x41, 0x52, 0x44, 0x10, 0xd1, 0x0f, 0x12, 0x24, 0x0a, 0x1f, 0x4d, 0x53,
	0x47, 0x49, 0x44, 0x5f, 0x43, 0x53, 0x5f, 0x42, 0x55, 0x52, 0x52, 0x41, 0x43, 0x4f, 0x5f, 0x55,
	0x53, 0x45, 0x52, 0x5f, 0x53, 0x4f, 0x4c, 0x49, 0x54, 0x41, 0x49, 0x52, 0x45, 0x10, 0xd2, 0x0f,
	0x12, 0x22, 0x0a, 0x1d, 0x4d, 0x53, 0x47, 0x49, 0x44, 0x5f, 0x43, 0x53, 0x5f, 0x42, 0x55, 0x52,
	0x52, 0x41, 0x43, 0x4f, 0x5f, 0x55, 0x53, 0x45, 0x52, 0x5f, 0x44, 0x49, 0x53, 0x43, 0x41, 0x52,
	0x44, 0x10, 0xd3, 0x0f, 0x12, 0x23, 0x0a, 0x1e, 0x4d, 0x53, 0x47, 0x49, 0x44, 0x5f, 0x43, 0x53,
	0x5f, 0x42, 0x55, 0x52, 0x52, 0x41, 0x43, 0x4f, 0x5f, 0x55, 0x53, 0x45, 0x52, 0x5f, 0x47, 0x41,
	0x4d, 0x45, 0x5f, 0x45, 0x4e, 0x44, 0x10, 0xd4, 0x0f, 0x12, 0x24, 0x0a, 0x1f, 0x4d, 0x53, 0x47,
	0x49, 0x44, 0x5f, 0x43, 0x53, 0x5f, 0x42, 0x55, 0x52, 0x52, 0x41, 0x43, 0x4f, 0x5f, 0x52, 0x4f,
	0x42, 0x4f, 0x54, 0x5f, 0x47, 0x41, 0x4d, 0x45, 0x5f, 0x45, 0x4e, 0x44, 0x10, 0xd8, 0x0f, 0x2a,
	0x6d, 0x0a, 0x0d, 0x42, 0x55, 0x52, 0x52, 0x41, 0x43, 0x4f, 0x5f, 0x43, 0x4f, 0x4e, 0x53, 0x54,
	0x12, 0x17, 0x0a, 0x13, 0x42, 0x55, 0x52, 0x52, 0x41, 0x43, 0x4f, 0x5f, 0x47, 0x41, 0x4d, 0x45,
	0x5f, 0x50, 0x4c, 0x41, 0x59, 0x45, 0x52, 0x10, 0x04, 0x12, 0x20, 0x0a, 0x1c, 0x42, 0x55, 0x52,
	0x52, 0x41, 0x43, 0x4f, 0x5f, 0x53, 0x45, 0x4e, 0x44, 0x5f, 0x48, 0x41, 0x4e, 0x44, 0x5f, 0x43,
	0x41, 0x52, 0x44, 0x5f, 0x43, 0x4f, 0x55, 0x4e, 0x54, 0x10, 0x0b, 0x12, 0x21, 0x0a, 0x1d, 0x42,
	0x55, 0x52, 0x52, 0x41, 0x43, 0x4f, 0x5f, 0x53, 0x45, 0x4e, 0x44, 0x5f, 0x54, 0x41, 0x42, 0x4c,
	0x45, 0x5f, 0x43, 0x41, 0x52, 0x44, 0x5f, 0x43, 0x4f, 0x55, 0x4e, 0x54, 0x10, 0x01, 0x2a, 0x9f,
	0x01, 0x0a, 0x13, 0x42, 0x55, 0x52, 0x52, 0x41, 0x43, 0x4f, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x4f,
	0x4e, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x12, 0x1e, 0x0a, 0x1a, 0x4d, 0x53, 0x47, 0x5f, 0x42, 0x55,
	0x52, 0x52, 0x41, 0x43, 0x4f, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x44, 0x49, 0x53,
	0x43, 0x41, 0x52, 0x44, 0x10, 0x01, 0x12, 0x23, 0x0a, 0x1f, 0x4d, 0x53, 0x47, 0x5f, 0x42, 0x55,
	0x52, 0x52, 0x41, 0x43, 0x4f, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x47, 0x45, 0x54,
	0x54, 0x41, 0x42, 0x4c, 0x45, 0x43, 0x41, 0x52, 0x44, 0x10, 0x02, 0x12, 0x21, 0x0a, 0x1d, 0x4d,
	0x53, 0x47, 0x5f, 0x42, 0x55, 0x52, 0x52, 0x41, 0x43, 0x4f, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x4f,
	0x4e, 0x5f, 0x47, 0x45, 0x54, 0x44, 0x49, 0x53, 0x43, 0x41, 0x52, 0x44, 0x10, 0x03, 0x12, 0x20,
	0x0a, 0x1c, 0x4d, 0x53, 0x47, 0x5f, 0x42, 0x55, 0x52, 0x52, 0x41, 0x43, 0x4f, 0x5f, 0x41, 0x43,
	0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x47, 0x52, 0x4f, 0x55, 0x50, 0x43, 0x41, 0x52, 0x44, 0x10, 0x04,
	0x2a, 0x3b, 0x0a, 0x11, 0x42, 0x55, 0x52, 0x52, 0x41, 0x43, 0x4f, 0x5f, 0x50, 0x49, 0x43, 0x4b,
	0x5f, 0x46, 0x52, 0x4f, 0x4d, 0x12, 0x11, 0x0a, 0x0d, 0x4d, 0x53, 0x47, 0x5f, 0x46, 0x52, 0x4f,
	0x4d, 0x5f, 0x44, 0x45, 0x53, 0x4b, 0x10, 0x01, 0x12, 0x13, 0x0a, 0x0f, 0x4d, 0x53, 0x47, 0x5f,
	0x46, 0x52, 0x4f, 0x4d, 0x5f, 0x47, 0x49, 0x56, 0x45, 0x55, 0x50, 0x10, 0x02, 0x2a, 0xd2, 0x01,
	0x0a, 0x13, 0x42, 0x55, 0x52, 0x52, 0x41, 0x43, 0x4f, 0x5f, 0x47, 0x41, 0x4d, 0x45, 0x5f, 0x53,
	0x54, 0x41, 0x54, 0x55, 0x53, 0x12, 0x20, 0x0a, 0x1c, 0x4d, 0x53, 0x47, 0x5f, 0x42, 0x55, 0x52,
	0x52, 0x41, 0x43, 0x4f, 0x5f, 0x47, 0x41, 0x4d, 0x45, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53,
	0x5f, 0x46, 0x52, 0x45, 0x45, 0x10, 0x01, 0x12, 0x25, 0x0a, 0x21, 0x4d, 0x53, 0x47, 0x5f, 0x42,
	0x55, 0x52, 0x52, 0x41, 0x43, 0x4f, 0x5f, 0x47, 0x41, 0x4d, 0x45, 0x5f, 0x53, 0x54, 0x41, 0x54,
	0x55, 0x53, 0x5f, 0x53, 0x45, 0x4e, 0x44, 0x5f, 0x43, 0x41, 0x52, 0x44, 0x10, 0x02, 0x12, 0x25,
	0x0a, 0x21, 0x4d, 0x53, 0x47, 0x5f, 0x42, 0x55, 0x52, 0x52, 0x41, 0x43, 0x4f, 0x5f, 0x47, 0x41,
	0x4d, 0x45, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x47, 0x45, 0x54, 0x5f, 0x43, 0x41,
	0x52, 0x44, 0x53, 0x10, 0x03, 0x12, 0x25, 0x0a, 0x21, 0x4d, 0x53, 0x47, 0x5f, 0x42, 0x55, 0x52,
	0x52, 0x41, 0x43, 0x4f, 0x5f, 0x47, 0x41, 0x4d, 0x45, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53,
	0x5f, 0x53, 0x4f, 0x4c, 0x49, 0x54, 0x41, 0x49, 0x52, 0x45, 0x10, 0x04, 0x12, 0x24, 0x0a, 0x20,
	0x4d, 0x53, 0x47, 0x5f, 0x42, 0x55, 0x52, 0x52, 0x41, 0x43, 0x4f, 0x5f, 0x47, 0x41, 0x4d, 0x45,
	0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x44, 0x49, 0x53, 0x43, 0x41, 0x52, 0x44, 0x53,
	0x10, 0x05, 0x42, 0x05, 0x5a, 0x03, 0x2f, 0x70, 0x62,
}

var (
	file_preson_proto_rawDescOnce sync.Once
	file_preson_proto_rawDescData = file_preson_proto_rawDesc
)

func file_preson_proto_rawDescGZIP() []byte {
	file_preson_proto_rawDescOnce.Do(func() {
		file_preson_proto_rawDescData = protoimpl.X.CompressGZIP(file_preson_proto_rawDescData)
	})
	return file_preson_proto_rawDescData
}

var file_preson_proto_enumTypes = make([]protoimpl.EnumInfo, 7)
var file_preson_proto_msgTypes = make([]protoimpl.MessageInfo, 19)
var file_preson_proto_goTypes = []interface{}{
	(LOGIC_MAIN_MSG)(0),                        // 0: pb.LOGIC_MAIN_MSG
	(MESSAGE_SC_BURRACO_SUB_ID)(0),             // 1: pb.MESSAGE_SC_BURRACO_SUB_ID
	(MESSAGE_CS_BURRACO_SUB_ID)(0),             // 2: pb.MESSAGE_CS_BURRACO_SUB_ID
	(BURRACO_CONST)(0),                         // 3: pb.BURRACO_CONST
	(BURRACO_ACTION_TYPE)(0),                   // 4: pb.BURRACO_ACTION_TYPE
	(BURRACO_PICK_FROM)(0),                     // 5: pb.BURRACO_PICK_FROM
	(BURRACO_GAME_STATUS)(0),                   // 6: pb.BURRACO_GAME_STATUS
	(*MSG_SC_BURRACO_GameStartData)(nil),       // 7: pb.MSG_SC_BURRACO_GameStartData
	(*GroupCardData)(nil),                      // 8: pb.GroupCardData
	(*MSG_DeskData)(nil),                       // 9: pb.MSG_DeskData
	(*MSG_PlayerGameingData)(nil),              // 10: pb.MSG_PlayerGameingData
	(*MSG_SC_BURRACO_SendHandCard)(nil),        // 11: pb.MSG_SC_BURRACO_SendHandCard
	(*MSG_BURRACOUserSettleInfo)(nil),          // 12: pb.MSG_BURRACOUserSettleInfo
	(*MSG_SC_BURRACO_GameResult)(nil),          // 13: pb.MSG_SC_BURRACO_GameResult
	(*MSG_SC_BURRACO_GamePlay)(nil),            // 14: pb.MSG_SC_BURRACO_GamePlay
	(*MSG_SC_BURRACO_InformUserOP)(nil),        // 15: pb.MSG_SC_BURRACO_InformUserOP
	(*MSG_CS_BURRACO_UserGetCard)(nil),         // 16: pb.MSG_CS_BURRACO_UserGetCard
	(*MSG_SC_BURRACO_UserGetCardResult)(nil),   // 17: pb.MSG_SC_BURRACO_UserGetCardResult
	(*MSG_CS_BURRACO_UserSolitaire)(nil),       // 18: pb.MSG_CS_BURRACO_UserSolitaire
	(*MSG_SC_BURRACO_UserSolitaireResult)(nil), // 19: pb.MSG_SC_BURRACO_UserSolitaireResult
	(*MSG_CS_BURRACO_UserDiscard)(nil),         // 20: pb.MSG_CS_BURRACO_UserDiscard
	(*MSG_SC_BURRACO_UserDiscardResult)(nil),   // 21: pb.MSG_SC_BURRACO_UserDiscardResult
	(*MSG_SC_BURRACO_SendUserPOTCards)(nil),    // 22: pb.MSG_SC_BURRACO_SendUserPOTCards
	(*MSG_CS_BURRACO_UserGameEnd)(nil),         // 23: pb.MSG_CS_BURRACO_UserGameEnd
	(*MSG_CS_BURRACO_RobotGameEnd)(nil),        // 24: pb.MSG_CS_BURRACO_RobotGameEnd
	(*MSG_SC_BURRACO_RobotGameResult)(nil),     // 25: pb.MSG_SC_BURRACO_RobotGameResult
}
var file_preson_proto_depIdxs = []int32{
	8,  // 0: pb.MSG_DeskData.tabGroupCardDataList1:type_name -> pb.GroupCardData
	8,  // 1: pb.MSG_DeskData.tabGroupCardDataList2:type_name -> pb.GroupCardData
	9,  // 2: pb.MSG_SC_BURRACO_SendHandCard.DeskInfo:type_name -> pb.MSG_DeskData
	10, // 3: pb.MSG_SC_BURRACO_SendHandCard.PlayerInfo:type_name -> pb.MSG_PlayerGameingData
	12, // 4: pb.MSG_SC_BURRACO_GameResult.tabUserSettleInfoList:type_name -> pb.MSG_BURRACOUserSettleInfo
	10, // 5: pb.MSG_SC_BURRACO_GamePlay.PlayerInfo:type_name -> pb.MSG_PlayerGameingData
	9,  // 6: pb.MSG_SC_BURRACO_GamePlay.DeskInfo:type_name -> pb.MSG_DeskData
	12, // 7: pb.MSG_SC_BURRACO_RobotGameResult.tabUserSettleInfoList:type_name -> pb.MSG_BURRACOUserSettleInfo
	8,  // [8:8] is the sub-list for method output_type
	8,  // [8:8] is the sub-list for method input_type
	8,  // [8:8] is the sub-list for extension type_name
	8,  // [8:8] is the sub-list for extension extendee
	0,  // [0:8] is the sub-list for field type_name
}

func init() { file_preson_proto_init() }
func file_preson_proto_init() {
	if File_preson_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_preson_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MSG_SC_BURRACO_GameStartData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_preson_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GroupCardData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_preson_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MSG_DeskData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_preson_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MSG_PlayerGameingData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_preson_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MSG_SC_BURRACO_SendHandCard); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_preson_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MSG_BURRACOUserSettleInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_preson_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MSG_SC_BURRACO_GameResult); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_preson_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MSG_SC_BURRACO_GamePlay); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_preson_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MSG_SC_BURRACO_InformUserOP); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_preson_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MSG_CS_BURRACO_UserGetCard); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_preson_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MSG_SC_BURRACO_UserGetCardResult); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_preson_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MSG_CS_BURRACO_UserSolitaire); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_preson_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MSG_SC_BURRACO_UserSolitaireResult); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_preson_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MSG_CS_BURRACO_UserDiscard); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_preson_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MSG_SC_BURRACO_UserDiscardResult); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_preson_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MSG_SC_BURRACO_SendUserPOTCards); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_preson_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MSG_CS_BURRACO_UserGameEnd); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_preson_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MSG_CS_BURRACO_RobotGameEnd); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_preson_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MSG_SC_BURRACO_RobotGameResult); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_preson_proto_rawDesc,
			NumEnums:      7,
			NumMessages:   19,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_preson_proto_goTypes,
		DependencyIndexes: file_preson_proto_depIdxs,
		EnumInfos:         file_preson_proto_enumTypes,
		MessageInfos:      file_preson_proto_msgTypes,
	}.Build()
	File_preson_proto = out.File
	file_preson_proto_rawDesc = nil
	file_preson_proto_goTypes = nil
	file_preson_proto_depIdxs = nil
}
